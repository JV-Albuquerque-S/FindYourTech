
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  firstName: string
  lastName: string
  email: string
  password: string
}

/**
 * Model Cellphone
 * 
 */
export type Cellphone = {
  id: number
  name: string
  price: number | null
  processor: string
  RAM: number
  storage: number
  mAh: number
  have5G: boolean
  displayType: string
  displaySize: number
  displayResolution: string
  displayFPS: number
  OS: string
  brand: string
}

/**
 * Model CameraFeatures
 * 
 */
export type CameraFeatures = {
  id: number
  phoneId: number
  megaPixels: number
  apertureSize: number
  stabilization: string
  macro: boolean
  panorama: boolean
  ultrawide: boolean
}

/**
 * Model VideoFeatures
 * 
 */
export type VideoFeatures = {
  id: number
  phoneId: number
  maxRsolution: string
  maxFPS: number
  slowmotion: boolean
  stereoSoundRec: boolean
}

/**
 * Model Accessoreis
 * 
 */
export type Accessoreis = {
  id: number
  phoneId: number
  earphone: boolean
  charger: boolean
  chargerPower: number | null
  pen: boolean
  phoneCase: boolean
  screenProtector: boolean
}

/**
 * Model UserRating
 * 
 */
export type UserRating = {
  id: number
  userId: number
  phoneId: number
  rate: number
}

/**
 * Model Commentaries
 * 
 */
export type Commentaries = {
  id: number
  userId: number
  phoneId: number
  commentary: string
}

/**
 * Model UserFavorites
 * 
 */
export type UserFavorites = {
  id: number
  userId: number
  phoneId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.cellphone`: Exposes CRUD operations for the **Cellphone** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cellphones
    * const cellphones = await prisma.cellphone.findMany()
    * ```
    */
  get cellphone(): Prisma.CellphoneDelegate<GlobalReject>;

  /**
   * `prisma.cameraFeatures`: Exposes CRUD operations for the **CameraFeatures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CameraFeatures
    * const cameraFeatures = await prisma.cameraFeatures.findMany()
    * ```
    */
  get cameraFeatures(): Prisma.CameraFeaturesDelegate<GlobalReject>;

  /**
   * `prisma.videoFeatures`: Exposes CRUD operations for the **VideoFeatures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VideoFeatures
    * const videoFeatures = await prisma.videoFeatures.findMany()
    * ```
    */
  get videoFeatures(): Prisma.VideoFeaturesDelegate<GlobalReject>;

  /**
   * `prisma.accessoreis`: Exposes CRUD operations for the **Accessoreis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accessoreis
    * const accessoreis = await prisma.accessoreis.findMany()
    * ```
    */
  get accessoreis(): Prisma.AccessoreisDelegate<GlobalReject>;

  /**
   * `prisma.userRating`: Exposes CRUD operations for the **UserRating** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRatings
    * const userRatings = await prisma.userRating.findMany()
    * ```
    */
  get userRating(): Prisma.UserRatingDelegate<GlobalReject>;

  /**
   * `prisma.commentaries`: Exposes CRUD operations for the **Commentaries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Commentaries
    * const commentaries = await prisma.commentaries.findMany()
    * ```
    */
  get commentaries(): Prisma.CommentariesDelegate<GlobalReject>;

  /**
   * `prisma.userFavorites`: Exposes CRUD operations for the **UserFavorites** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserFavorites
    * const userFavorites = await prisma.userFavorites.findMany()
    * ```
    */
  get userFavorites(): Prisma.UserFavoritesDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.4.0
   * Query Engine version: f352a33b70356f46311da8b00d83386dd9f145d6
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Cellphone: 'Cellphone',
    CameraFeatures: 'CameraFeatures',
    VideoFeatures: 'VideoFeatures',
    Accessoreis: 'Accessoreis',
    UserRating: 'UserRating',
    Commentaries: 'Commentaries',
    UserFavorites: 'UserFavorites'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    userRating: number
    commentaries: number
    userFavorites: number
  }

  export type UserCountOutputTypeSelect = {
    userRating?: boolean
    commentaries?: boolean
    userFavorites?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type CellphoneCountOutputType
   */


  export type CellphoneCountOutputType = {
    cameraFeatures: number
    videoFeatures: number
    accessories: number
    userRating: number
    commentaries: number
    userFavorites: number
  }

  export type CellphoneCountOutputTypeSelect = {
    cameraFeatures?: boolean
    videoFeatures?: boolean
    accessories?: boolean
    userRating?: boolean
    commentaries?: boolean
    userFavorites?: boolean
  }

  export type CellphoneCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CellphoneCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CellphoneCountOutputType
    : S extends undefined
    ? never
    : S extends CellphoneCountOutputTypeArgs
    ?'include' extends U
    ? CellphoneCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CellphoneCountOutputType ? CellphoneCountOutputType[P] : never
  } 
    : CellphoneCountOutputType
  : CellphoneCountOutputType




  // Custom InputTypes

  /**
   * CellphoneCountOutputType without action
   */
  export type CellphoneCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CellphoneCountOutputType
     * 
    **/
    select?: CellphoneCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    password: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    userRating?: boolean | UserRatingFindManyArgs
    commentaries?: boolean | CommentariesFindManyArgs
    userFavorites?: boolean | UserFavoritesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    userRating?: boolean | UserRatingFindManyArgs
    commentaries?: boolean | CommentariesFindManyArgs
    userFavorites?: boolean | UserFavoritesFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'userRating' ? Array < UserRatingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'commentaries' ? Array < CommentariesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'userFavorites' ? Array < UserFavoritesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'userRating' ? Array < UserRatingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'commentaries' ? Array < CommentariesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'userFavorites' ? Array < UserFavoritesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    userRating<T extends UserRatingFindManyArgs = {}>(args?: Subset<T, UserRatingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRating>| Null>, PrismaPromise<Array<UserRatingGetPayload<T>>| Null>>;

    commentaries<T extends CommentariesFindManyArgs = {}>(args?: Subset<T, CommentariesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Commentaries>| Null>, PrismaPromise<Array<CommentariesGetPayload<T>>| Null>>;

    userFavorites<T extends UserFavoritesFindManyArgs = {}>(args?: Subset<T, UserFavoritesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserFavorites>| Null>, PrismaPromise<Array<UserFavoritesGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Cellphone
   */


  export type AggregateCellphone = {
    _count: CellphoneCountAggregateOutputType | null
    _avg: CellphoneAvgAggregateOutputType | null
    _sum: CellphoneSumAggregateOutputType | null
    _min: CellphoneMinAggregateOutputType | null
    _max: CellphoneMaxAggregateOutputType | null
  }

  export type CellphoneAvgAggregateOutputType = {
    id: number | null
    price: number | null
    RAM: number | null
    storage: number | null
    mAh: number | null
    displaySize: number | null
    displayFPS: number | null
  }

  export type CellphoneSumAggregateOutputType = {
    id: number | null
    price: number | null
    RAM: number | null
    storage: number | null
    mAh: number | null
    displaySize: number | null
    displayFPS: number | null
  }

  export type CellphoneMinAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    processor: string | null
    RAM: number | null
    storage: number | null
    mAh: number | null
    have5G: boolean | null
    displayType: string | null
    displaySize: number | null
    displayResolution: string | null
    displayFPS: number | null
    OS: string | null
    brand: string | null
  }

  export type CellphoneMaxAggregateOutputType = {
    id: number | null
    name: string | null
    price: number | null
    processor: string | null
    RAM: number | null
    storage: number | null
    mAh: number | null
    have5G: boolean | null
    displayType: string | null
    displaySize: number | null
    displayResolution: string | null
    displayFPS: number | null
    OS: string | null
    brand: string | null
  }

  export type CellphoneCountAggregateOutputType = {
    id: number
    name: number
    price: number
    processor: number
    RAM: number
    storage: number
    mAh: number
    have5G: number
    displayType: number
    displaySize: number
    displayResolution: number
    displayFPS: number
    OS: number
    brand: number
    _all: number
  }


  export type CellphoneAvgAggregateInputType = {
    id?: true
    price?: true
    RAM?: true
    storage?: true
    mAh?: true
    displaySize?: true
    displayFPS?: true
  }

  export type CellphoneSumAggregateInputType = {
    id?: true
    price?: true
    RAM?: true
    storage?: true
    mAh?: true
    displaySize?: true
    displayFPS?: true
  }

  export type CellphoneMinAggregateInputType = {
    id?: true
    name?: true
    price?: true
    processor?: true
    RAM?: true
    storage?: true
    mAh?: true
    have5G?: true
    displayType?: true
    displaySize?: true
    displayResolution?: true
    displayFPS?: true
    OS?: true
    brand?: true
  }

  export type CellphoneMaxAggregateInputType = {
    id?: true
    name?: true
    price?: true
    processor?: true
    RAM?: true
    storage?: true
    mAh?: true
    have5G?: true
    displayType?: true
    displaySize?: true
    displayResolution?: true
    displayFPS?: true
    OS?: true
    brand?: true
  }

  export type CellphoneCountAggregateInputType = {
    id?: true
    name?: true
    price?: true
    processor?: true
    RAM?: true
    storage?: true
    mAh?: true
    have5G?: true
    displayType?: true
    displaySize?: true
    displayResolution?: true
    displayFPS?: true
    OS?: true
    brand?: true
    _all?: true
  }

  export type CellphoneAggregateArgs = {
    /**
     * Filter which Cellphone to aggregate.
     * 
    **/
    where?: CellphoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cellphones to fetch.
     * 
    **/
    orderBy?: Enumerable<CellphoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CellphoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cellphones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cellphones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cellphones
    **/
    _count?: true | CellphoneCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CellphoneAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CellphoneSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CellphoneMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CellphoneMaxAggregateInputType
  }

  export type GetCellphoneAggregateType<T extends CellphoneAggregateArgs> = {
        [P in keyof T & keyof AggregateCellphone]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCellphone[P]>
      : GetScalarType<T[P], AggregateCellphone[P]>
  }




  export type CellphoneGroupByArgs = {
    where?: CellphoneWhereInput
    orderBy?: Enumerable<CellphoneOrderByWithAggregationInput>
    by: Array<CellphoneScalarFieldEnum>
    having?: CellphoneScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CellphoneCountAggregateInputType | true
    _avg?: CellphoneAvgAggregateInputType
    _sum?: CellphoneSumAggregateInputType
    _min?: CellphoneMinAggregateInputType
    _max?: CellphoneMaxAggregateInputType
  }


  export type CellphoneGroupByOutputType = {
    id: number
    name: string
    price: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    _count: CellphoneCountAggregateOutputType | null
    _avg: CellphoneAvgAggregateOutputType | null
    _sum: CellphoneSumAggregateOutputType | null
    _min: CellphoneMinAggregateOutputType | null
    _max: CellphoneMaxAggregateOutputType | null
  }

  type GetCellphoneGroupByPayload<T extends CellphoneGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CellphoneGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CellphoneGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CellphoneGroupByOutputType[P]>
            : GetScalarType<T[P], CellphoneGroupByOutputType[P]>
        }
      >
    >


  export type CellphoneSelect = {
    id?: boolean
    name?: boolean
    price?: boolean
    processor?: boolean
    RAM?: boolean
    storage?: boolean
    mAh?: boolean
    have5G?: boolean
    displayType?: boolean
    displaySize?: boolean
    displayResolution?: boolean
    displayFPS?: boolean
    OS?: boolean
    brand?: boolean
    cameraFeatures?: boolean | CameraFeaturesFindManyArgs
    videoFeatures?: boolean | VideoFeaturesFindManyArgs
    accessories?: boolean | AccessoreisFindManyArgs
    userRating?: boolean | UserRatingFindManyArgs
    commentaries?: boolean | CommentariesFindManyArgs
    userFavorites?: boolean | UserFavoritesFindManyArgs
    _count?: boolean | CellphoneCountOutputTypeArgs
  }

  export type CellphoneInclude = {
    cameraFeatures?: boolean | CameraFeaturesFindManyArgs
    videoFeatures?: boolean | VideoFeaturesFindManyArgs
    accessories?: boolean | AccessoreisFindManyArgs
    userRating?: boolean | UserRatingFindManyArgs
    commentaries?: boolean | CommentariesFindManyArgs
    userFavorites?: boolean | UserFavoritesFindManyArgs
    _count?: boolean | CellphoneCountOutputTypeArgs
  }

  export type CellphoneGetPayload<
    S extends boolean | null | undefined | CellphoneArgs,
    U = keyof S
      > = S extends true
        ? Cellphone
    : S extends undefined
    ? never
    : S extends CellphoneArgs | CellphoneFindManyArgs
    ?'include' extends U
    ? Cellphone  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cameraFeatures' ? Array < CameraFeaturesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'videoFeatures' ? Array < VideoFeaturesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'accessories' ? Array < AccessoreisGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'userRating' ? Array < UserRatingGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'commentaries' ? Array < CommentariesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'userFavorites' ? Array < UserFavoritesGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? CellphoneCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cameraFeatures' ? Array < CameraFeaturesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'videoFeatures' ? Array < VideoFeaturesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'accessories' ? Array < AccessoreisGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'userRating' ? Array < UserRatingGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'commentaries' ? Array < CommentariesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'userFavorites' ? Array < UserFavoritesGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? CellphoneCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Cellphone ? Cellphone[P] : never
  } 
    : Cellphone
  : Cellphone


  type CellphoneCountArgs = Merge<
    Omit<CellphoneFindManyArgs, 'select' | 'include'> & {
      select?: CellphoneCountAggregateInputType | true
    }
  >

  export interface CellphoneDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Cellphone that matches the filter.
     * @param {CellphoneFindUniqueArgs} args - Arguments to find a Cellphone
     * @example
     * // Get one Cellphone
     * const cellphone = await prisma.cellphone.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CellphoneFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CellphoneFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Cellphone'> extends True ? CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>> : CheckSelect<T, Prisma__CellphoneClient<Cellphone | null, null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | null, null>>

    /**
     * Find the first Cellphone that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneFindFirstArgs} args - Arguments to find a Cellphone
     * @example
     * // Get one Cellphone
     * const cellphone = await prisma.cellphone.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CellphoneFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CellphoneFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Cellphone'> extends True ? CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>> : CheckSelect<T, Prisma__CellphoneClient<Cellphone | null, null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | null, null>>

    /**
     * Find zero or more Cellphones that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cellphones
     * const cellphones = await prisma.cellphone.findMany()
     * 
     * // Get first 10 Cellphones
     * const cellphones = await prisma.cellphone.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cellphoneWithIdOnly = await prisma.cellphone.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CellphoneFindManyArgs>(
      args?: SelectSubset<T, CellphoneFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Cellphone>>, PrismaPromise<Array<CellphoneGetPayload<T>>>>

    /**
     * Create a Cellphone.
     * @param {CellphoneCreateArgs} args - Arguments to create a Cellphone.
     * @example
     * // Create one Cellphone
     * const Cellphone = await prisma.cellphone.create({
     *   data: {
     *     // ... data to create a Cellphone
     *   }
     * })
     * 
    **/
    create<T extends CellphoneCreateArgs>(
      args: SelectSubset<T, CellphoneCreateArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Create many Cellphones.
     *     @param {CellphoneCreateManyArgs} args - Arguments to create many Cellphones.
     *     @example
     *     // Create many Cellphones
     *     const cellphone = await prisma.cellphone.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CellphoneCreateManyArgs>(
      args?: SelectSubset<T, CellphoneCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Cellphone.
     * @param {CellphoneDeleteArgs} args - Arguments to delete one Cellphone.
     * @example
     * // Delete one Cellphone
     * const Cellphone = await prisma.cellphone.delete({
     *   where: {
     *     // ... filter to delete one Cellphone
     *   }
     * })
     * 
    **/
    delete<T extends CellphoneDeleteArgs>(
      args: SelectSubset<T, CellphoneDeleteArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Update one Cellphone.
     * @param {CellphoneUpdateArgs} args - Arguments to update one Cellphone.
     * @example
     * // Update one Cellphone
     * const cellphone = await prisma.cellphone.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CellphoneUpdateArgs>(
      args: SelectSubset<T, CellphoneUpdateArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Delete zero or more Cellphones.
     * @param {CellphoneDeleteManyArgs} args - Arguments to filter Cellphones to delete.
     * @example
     * // Delete a few Cellphones
     * const { count } = await prisma.cellphone.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CellphoneDeleteManyArgs>(
      args?: SelectSubset<T, CellphoneDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cellphones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cellphones
     * const cellphone = await prisma.cellphone.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CellphoneUpdateManyArgs>(
      args: SelectSubset<T, CellphoneUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Cellphone.
     * @param {CellphoneUpsertArgs} args - Arguments to update or create a Cellphone.
     * @example
     * // Update or create a Cellphone
     * const cellphone = await prisma.cellphone.upsert({
     *   create: {
     *     // ... data to create a Cellphone
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cellphone we want to update
     *   }
     * })
    **/
    upsert<T extends CellphoneUpsertArgs>(
      args: SelectSubset<T, CellphoneUpsertArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Find one Cellphone that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CellphoneFindUniqueOrThrowArgs} args - Arguments to find a Cellphone
     * @example
     * // Get one Cellphone
     * const cellphone = await prisma.cellphone.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CellphoneFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CellphoneFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Find the first Cellphone that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneFindFirstOrThrowArgs} args - Arguments to find a Cellphone
     * @example
     * // Get one Cellphone
     * const cellphone = await prisma.cellphone.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CellphoneFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CellphoneFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CellphoneClient<Cellphone>, Prisma__CellphoneClient<CellphoneGetPayload<T>>>

    /**
     * Count the number of Cellphones.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneCountArgs} args - Arguments to filter Cellphones to count.
     * @example
     * // Count the number of Cellphones
     * const count = await prisma.cellphone.count({
     *   where: {
     *     // ... the filter for the Cellphones we want to count
     *   }
     * })
    **/
    count<T extends CellphoneCountArgs>(
      args?: Subset<T, CellphoneCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CellphoneCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cellphone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CellphoneAggregateArgs>(args: Subset<T, CellphoneAggregateArgs>): PrismaPromise<GetCellphoneAggregateType<T>>

    /**
     * Group by Cellphone.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CellphoneGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CellphoneGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CellphoneGroupByArgs['orderBy'] }
        : { orderBy?: CellphoneGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CellphoneGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCellphoneGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Cellphone.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CellphoneClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cameraFeatures<T extends CameraFeaturesFindManyArgs = {}>(args?: Subset<T, CameraFeaturesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<CameraFeatures>| Null>, PrismaPromise<Array<CameraFeaturesGetPayload<T>>| Null>>;

    videoFeatures<T extends VideoFeaturesFindManyArgs = {}>(args?: Subset<T, VideoFeaturesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<VideoFeatures>| Null>, PrismaPromise<Array<VideoFeaturesGetPayload<T>>| Null>>;

    accessories<T extends AccessoreisFindManyArgs = {}>(args?: Subset<T, AccessoreisFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Accessoreis>| Null>, PrismaPromise<Array<AccessoreisGetPayload<T>>| Null>>;

    userRating<T extends UserRatingFindManyArgs = {}>(args?: Subset<T, UserRatingFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserRating>| Null>, PrismaPromise<Array<UserRatingGetPayload<T>>| Null>>;

    commentaries<T extends CommentariesFindManyArgs = {}>(args?: Subset<T, CommentariesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Commentaries>| Null>, PrismaPromise<Array<CommentariesGetPayload<T>>| Null>>;

    userFavorites<T extends UserFavoritesFindManyArgs = {}>(args?: Subset<T, UserFavoritesFindManyArgs>): CheckSelect<T, PrismaPromise<Array<UserFavorites>| Null>, PrismaPromise<Array<UserFavoritesGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Cellphone base type for findUnique actions
   */
  export type CellphoneFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * Filter, which Cellphone to fetch.
     * 
    **/
    where: CellphoneWhereUniqueInput
  }

  /**
   * Cellphone: findUnique
   */
  export interface CellphoneFindUniqueArgs extends CellphoneFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cellphone base type for findFirst actions
   */
  export type CellphoneFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * Filter, which Cellphone to fetch.
     * 
    **/
    where?: CellphoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cellphones to fetch.
     * 
    **/
    orderBy?: Enumerable<CellphoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cellphones.
     * 
    **/
    cursor?: CellphoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cellphones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cellphones.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cellphones.
     * 
    **/
    distinct?: Enumerable<CellphoneScalarFieldEnum>
  }

  /**
   * Cellphone: findFirst
   */
  export interface CellphoneFindFirstArgs extends CellphoneFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Cellphone findMany
   */
  export type CellphoneFindManyArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * Filter, which Cellphones to fetch.
     * 
    **/
    where?: CellphoneWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cellphones to fetch.
     * 
    **/
    orderBy?: Enumerable<CellphoneOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cellphones.
     * 
    **/
    cursor?: CellphoneWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cellphones from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cellphones.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CellphoneScalarFieldEnum>
  }


  /**
   * Cellphone create
   */
  export type CellphoneCreateArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * The data needed to create a Cellphone.
     * 
    **/
    data: XOR<CellphoneCreateInput, CellphoneUncheckedCreateInput>
  }


  /**
   * Cellphone createMany
   */
  export type CellphoneCreateManyArgs = {
    /**
     * The data used to create many Cellphones.
     * 
    **/
    data: Enumerable<CellphoneCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Cellphone update
   */
  export type CellphoneUpdateArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * The data needed to update a Cellphone.
     * 
    **/
    data: XOR<CellphoneUpdateInput, CellphoneUncheckedUpdateInput>
    /**
     * Choose, which Cellphone to update.
     * 
    **/
    where: CellphoneWhereUniqueInput
  }


  /**
   * Cellphone updateMany
   */
  export type CellphoneUpdateManyArgs = {
    /**
     * The data used to update Cellphones.
     * 
    **/
    data: XOR<CellphoneUpdateManyMutationInput, CellphoneUncheckedUpdateManyInput>
    /**
     * Filter which Cellphones to update
     * 
    **/
    where?: CellphoneWhereInput
  }


  /**
   * Cellphone upsert
   */
  export type CellphoneUpsertArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * The filter to search for the Cellphone to update in case it exists.
     * 
    **/
    where: CellphoneWhereUniqueInput
    /**
     * In case the Cellphone found by the `where` argument doesn't exist, create a new Cellphone with this data.
     * 
    **/
    create: XOR<CellphoneCreateInput, CellphoneUncheckedCreateInput>
    /**
     * In case the Cellphone was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CellphoneUpdateInput, CellphoneUncheckedUpdateInput>
  }


  /**
   * Cellphone delete
   */
  export type CellphoneDeleteArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
    /**
     * Filter which Cellphone to delete.
     * 
    **/
    where: CellphoneWhereUniqueInput
  }


  /**
   * Cellphone deleteMany
   */
  export type CellphoneDeleteManyArgs = {
    /**
     * Filter which Cellphones to delete
     * 
    **/
    where?: CellphoneWhereInput
  }


  /**
   * Cellphone: findUniqueOrThrow
   */
  export type CellphoneFindUniqueOrThrowArgs = CellphoneFindUniqueArgsBase
      

  /**
   * Cellphone: findFirstOrThrow
   */
  export type CellphoneFindFirstOrThrowArgs = CellphoneFindFirstArgsBase
      

  /**
   * Cellphone without action
   */
  export type CellphoneArgs = {
    /**
     * Select specific fields to fetch from the Cellphone
     * 
    **/
    select?: CellphoneSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CellphoneInclude | null
  }



  /**
   * Model CameraFeatures
   */


  export type AggregateCameraFeatures = {
    _count: CameraFeaturesCountAggregateOutputType | null
    _avg: CameraFeaturesAvgAggregateOutputType | null
    _sum: CameraFeaturesSumAggregateOutputType | null
    _min: CameraFeaturesMinAggregateOutputType | null
    _max: CameraFeaturesMaxAggregateOutputType | null
  }

  export type CameraFeaturesAvgAggregateOutputType = {
    id: number | null
    phoneId: number | null
    megaPixels: number | null
    apertureSize: number | null
  }

  export type CameraFeaturesSumAggregateOutputType = {
    id: number | null
    phoneId: number | null
    megaPixels: number | null
    apertureSize: number | null
  }

  export type CameraFeaturesMinAggregateOutputType = {
    id: number | null
    phoneId: number | null
    megaPixels: number | null
    apertureSize: number | null
    stabilization: string | null
    macro: boolean | null
    panorama: boolean | null
    ultrawide: boolean | null
  }

  export type CameraFeaturesMaxAggregateOutputType = {
    id: number | null
    phoneId: number | null
    megaPixels: number | null
    apertureSize: number | null
    stabilization: string | null
    macro: boolean | null
    panorama: boolean | null
    ultrawide: boolean | null
  }

  export type CameraFeaturesCountAggregateOutputType = {
    id: number
    phoneId: number
    megaPixels: number
    apertureSize: number
    stabilization: number
    macro: number
    panorama: number
    ultrawide: number
    _all: number
  }


  export type CameraFeaturesAvgAggregateInputType = {
    id?: true
    phoneId?: true
    megaPixels?: true
    apertureSize?: true
  }

  export type CameraFeaturesSumAggregateInputType = {
    id?: true
    phoneId?: true
    megaPixels?: true
    apertureSize?: true
  }

  export type CameraFeaturesMinAggregateInputType = {
    id?: true
    phoneId?: true
    megaPixels?: true
    apertureSize?: true
    stabilization?: true
    macro?: true
    panorama?: true
    ultrawide?: true
  }

  export type CameraFeaturesMaxAggregateInputType = {
    id?: true
    phoneId?: true
    megaPixels?: true
    apertureSize?: true
    stabilization?: true
    macro?: true
    panorama?: true
    ultrawide?: true
  }

  export type CameraFeaturesCountAggregateInputType = {
    id?: true
    phoneId?: true
    megaPixels?: true
    apertureSize?: true
    stabilization?: true
    macro?: true
    panorama?: true
    ultrawide?: true
    _all?: true
  }

  export type CameraFeaturesAggregateArgs = {
    /**
     * Filter which CameraFeatures to aggregate.
     * 
    **/
    where?: CameraFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CameraFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<CameraFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CameraFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CameraFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CameraFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CameraFeatures
    **/
    _count?: true | CameraFeaturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CameraFeaturesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CameraFeaturesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CameraFeaturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CameraFeaturesMaxAggregateInputType
  }

  export type GetCameraFeaturesAggregateType<T extends CameraFeaturesAggregateArgs> = {
        [P in keyof T & keyof AggregateCameraFeatures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCameraFeatures[P]>
      : GetScalarType<T[P], AggregateCameraFeatures[P]>
  }




  export type CameraFeaturesGroupByArgs = {
    where?: CameraFeaturesWhereInput
    orderBy?: Enumerable<CameraFeaturesOrderByWithAggregationInput>
    by: Array<CameraFeaturesScalarFieldEnum>
    having?: CameraFeaturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CameraFeaturesCountAggregateInputType | true
    _avg?: CameraFeaturesAvgAggregateInputType
    _sum?: CameraFeaturesSumAggregateInputType
    _min?: CameraFeaturesMinAggregateInputType
    _max?: CameraFeaturesMaxAggregateInputType
  }


  export type CameraFeaturesGroupByOutputType = {
    id: number
    phoneId: number
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
    _count: CameraFeaturesCountAggregateOutputType | null
    _avg: CameraFeaturesAvgAggregateOutputType | null
    _sum: CameraFeaturesSumAggregateOutputType | null
    _min: CameraFeaturesMinAggregateOutputType | null
    _max: CameraFeaturesMaxAggregateOutputType | null
  }

  type GetCameraFeaturesGroupByPayload<T extends CameraFeaturesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CameraFeaturesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CameraFeaturesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CameraFeaturesGroupByOutputType[P]>
            : GetScalarType<T[P], CameraFeaturesGroupByOutputType[P]>
        }
      >
    >


  export type CameraFeaturesSelect = {
    id?: boolean
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
    megaPixels?: boolean
    apertureSize?: boolean
    stabilization?: boolean
    macro?: boolean
    panorama?: boolean
    ultrawide?: boolean
  }

  export type CameraFeaturesInclude = {
    cellphones?: boolean | CellphoneArgs
  }

  export type CameraFeaturesGetPayload<
    S extends boolean | null | undefined | CameraFeaturesArgs,
    U = keyof S
      > = S extends true
        ? CameraFeatures
    : S extends undefined
    ? never
    : S extends CameraFeaturesArgs | CameraFeaturesFindManyArgs
    ?'include' extends U
    ? CameraFeatures  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof CameraFeatures ? CameraFeatures[P] : never
  } 
    : CameraFeatures
  : CameraFeatures


  type CameraFeaturesCountArgs = Merge<
    Omit<CameraFeaturesFindManyArgs, 'select' | 'include'> & {
      select?: CameraFeaturesCountAggregateInputType | true
    }
  >

  export interface CameraFeaturesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one CameraFeatures that matches the filter.
     * @param {CameraFeaturesFindUniqueArgs} args - Arguments to find a CameraFeatures
     * @example
     * // Get one CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CameraFeaturesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CameraFeaturesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'CameraFeatures'> extends True ? CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures | null, null>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T> | null, null>>

    /**
     * Find the first CameraFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesFindFirstArgs} args - Arguments to find a CameraFeatures
     * @example
     * // Get one CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CameraFeaturesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CameraFeaturesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'CameraFeatures'> extends True ? CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures | null, null>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T> | null, null>>

    /**
     * Find zero or more CameraFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findMany()
     * 
     * // Get first 10 CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cameraFeaturesWithIdOnly = await prisma.cameraFeatures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CameraFeaturesFindManyArgs>(
      args?: SelectSubset<T, CameraFeaturesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<CameraFeatures>>, PrismaPromise<Array<CameraFeaturesGetPayload<T>>>>

    /**
     * Create a CameraFeatures.
     * @param {CameraFeaturesCreateArgs} args - Arguments to create a CameraFeatures.
     * @example
     * // Create one CameraFeatures
     * const CameraFeatures = await prisma.cameraFeatures.create({
     *   data: {
     *     // ... data to create a CameraFeatures
     *   }
     * })
     * 
    **/
    create<T extends CameraFeaturesCreateArgs>(
      args: SelectSubset<T, CameraFeaturesCreateArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Create many CameraFeatures.
     *     @param {CameraFeaturesCreateManyArgs} args - Arguments to create many CameraFeatures.
     *     @example
     *     // Create many CameraFeatures
     *     const cameraFeatures = await prisma.cameraFeatures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CameraFeaturesCreateManyArgs>(
      args?: SelectSubset<T, CameraFeaturesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a CameraFeatures.
     * @param {CameraFeaturesDeleteArgs} args - Arguments to delete one CameraFeatures.
     * @example
     * // Delete one CameraFeatures
     * const CameraFeatures = await prisma.cameraFeatures.delete({
     *   where: {
     *     // ... filter to delete one CameraFeatures
     *   }
     * })
     * 
    **/
    delete<T extends CameraFeaturesDeleteArgs>(
      args: SelectSubset<T, CameraFeaturesDeleteArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Update one CameraFeatures.
     * @param {CameraFeaturesUpdateArgs} args - Arguments to update one CameraFeatures.
     * @example
     * // Update one CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CameraFeaturesUpdateArgs>(
      args: SelectSubset<T, CameraFeaturesUpdateArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Delete zero or more CameraFeatures.
     * @param {CameraFeaturesDeleteManyArgs} args - Arguments to filter CameraFeatures to delete.
     * @example
     * // Delete a few CameraFeatures
     * const { count } = await prisma.cameraFeatures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CameraFeaturesDeleteManyArgs>(
      args?: SelectSubset<T, CameraFeaturesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more CameraFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CameraFeaturesUpdateManyArgs>(
      args: SelectSubset<T, CameraFeaturesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one CameraFeatures.
     * @param {CameraFeaturesUpsertArgs} args - Arguments to update or create a CameraFeatures.
     * @example
     * // Update or create a CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.upsert({
     *   create: {
     *     // ... data to create a CameraFeatures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CameraFeatures we want to update
     *   }
     * })
    **/
    upsert<T extends CameraFeaturesUpsertArgs>(
      args: SelectSubset<T, CameraFeaturesUpsertArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Find one CameraFeatures that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CameraFeaturesFindUniqueOrThrowArgs} args - Arguments to find a CameraFeatures
     * @example
     * // Get one CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CameraFeaturesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CameraFeaturesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Find the first CameraFeatures that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesFindFirstOrThrowArgs} args - Arguments to find a CameraFeatures
     * @example
     * // Get one CameraFeatures
     * const cameraFeatures = await prisma.cameraFeatures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CameraFeaturesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CameraFeaturesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CameraFeaturesClient<CameraFeatures>, Prisma__CameraFeaturesClient<CameraFeaturesGetPayload<T>>>

    /**
     * Count the number of CameraFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesCountArgs} args - Arguments to filter CameraFeatures to count.
     * @example
     * // Count the number of CameraFeatures
     * const count = await prisma.cameraFeatures.count({
     *   where: {
     *     // ... the filter for the CameraFeatures we want to count
     *   }
     * })
    **/
    count<T extends CameraFeaturesCountArgs>(
      args?: Subset<T, CameraFeaturesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CameraFeaturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CameraFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CameraFeaturesAggregateArgs>(args: Subset<T, CameraFeaturesAggregateArgs>): PrismaPromise<GetCameraFeaturesAggregateType<T>>

    /**
     * Group by CameraFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CameraFeaturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CameraFeaturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CameraFeaturesGroupByArgs['orderBy'] }
        : { orderBy?: CameraFeaturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CameraFeaturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCameraFeaturesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for CameraFeatures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CameraFeaturesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * CameraFeatures base type for findUnique actions
   */
  export type CameraFeaturesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * Filter, which CameraFeatures to fetch.
     * 
    **/
    where: CameraFeaturesWhereUniqueInput
  }

  /**
   * CameraFeatures: findUnique
   */
  export interface CameraFeaturesFindUniqueArgs extends CameraFeaturesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CameraFeatures base type for findFirst actions
   */
  export type CameraFeaturesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * Filter, which CameraFeatures to fetch.
     * 
    **/
    where?: CameraFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CameraFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<CameraFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CameraFeatures.
     * 
    **/
    cursor?: CameraFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CameraFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CameraFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CameraFeatures.
     * 
    **/
    distinct?: Enumerable<CameraFeaturesScalarFieldEnum>
  }

  /**
   * CameraFeatures: findFirst
   */
  export interface CameraFeaturesFindFirstArgs extends CameraFeaturesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * CameraFeatures findMany
   */
  export type CameraFeaturesFindManyArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * Filter, which CameraFeatures to fetch.
     * 
    **/
    where?: CameraFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CameraFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<CameraFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CameraFeatures.
     * 
    **/
    cursor?: CameraFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CameraFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CameraFeatures.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CameraFeaturesScalarFieldEnum>
  }


  /**
   * CameraFeatures create
   */
  export type CameraFeaturesCreateArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * The data needed to create a CameraFeatures.
     * 
    **/
    data: XOR<CameraFeaturesCreateInput, CameraFeaturesUncheckedCreateInput>
  }


  /**
   * CameraFeatures createMany
   */
  export type CameraFeaturesCreateManyArgs = {
    /**
     * The data used to create many CameraFeatures.
     * 
    **/
    data: Enumerable<CameraFeaturesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * CameraFeatures update
   */
  export type CameraFeaturesUpdateArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * The data needed to update a CameraFeatures.
     * 
    **/
    data: XOR<CameraFeaturesUpdateInput, CameraFeaturesUncheckedUpdateInput>
    /**
     * Choose, which CameraFeatures to update.
     * 
    **/
    where: CameraFeaturesWhereUniqueInput
  }


  /**
   * CameraFeatures updateMany
   */
  export type CameraFeaturesUpdateManyArgs = {
    /**
     * The data used to update CameraFeatures.
     * 
    **/
    data: XOR<CameraFeaturesUpdateManyMutationInput, CameraFeaturesUncheckedUpdateManyInput>
    /**
     * Filter which CameraFeatures to update
     * 
    **/
    where?: CameraFeaturesWhereInput
  }


  /**
   * CameraFeatures upsert
   */
  export type CameraFeaturesUpsertArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * The filter to search for the CameraFeatures to update in case it exists.
     * 
    **/
    where: CameraFeaturesWhereUniqueInput
    /**
     * In case the CameraFeatures found by the `where` argument doesn't exist, create a new CameraFeatures with this data.
     * 
    **/
    create: XOR<CameraFeaturesCreateInput, CameraFeaturesUncheckedCreateInput>
    /**
     * In case the CameraFeatures was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CameraFeaturesUpdateInput, CameraFeaturesUncheckedUpdateInput>
  }


  /**
   * CameraFeatures delete
   */
  export type CameraFeaturesDeleteArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
    /**
     * Filter which CameraFeatures to delete.
     * 
    **/
    where: CameraFeaturesWhereUniqueInput
  }


  /**
   * CameraFeatures deleteMany
   */
  export type CameraFeaturesDeleteManyArgs = {
    /**
     * Filter which CameraFeatures to delete
     * 
    **/
    where?: CameraFeaturesWhereInput
  }


  /**
   * CameraFeatures: findUniqueOrThrow
   */
  export type CameraFeaturesFindUniqueOrThrowArgs = CameraFeaturesFindUniqueArgsBase
      

  /**
   * CameraFeatures: findFirstOrThrow
   */
  export type CameraFeaturesFindFirstOrThrowArgs = CameraFeaturesFindFirstArgsBase
      

  /**
   * CameraFeatures without action
   */
  export type CameraFeaturesArgs = {
    /**
     * Select specific fields to fetch from the CameraFeatures
     * 
    **/
    select?: CameraFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CameraFeaturesInclude | null
  }



  /**
   * Model VideoFeatures
   */


  export type AggregateVideoFeatures = {
    _count: VideoFeaturesCountAggregateOutputType | null
    _avg: VideoFeaturesAvgAggregateOutputType | null
    _sum: VideoFeaturesSumAggregateOutputType | null
    _min: VideoFeaturesMinAggregateOutputType | null
    _max: VideoFeaturesMaxAggregateOutputType | null
  }

  export type VideoFeaturesAvgAggregateOutputType = {
    id: number | null
    phoneId: number | null
    maxFPS: number | null
  }

  export type VideoFeaturesSumAggregateOutputType = {
    id: number | null
    phoneId: number | null
    maxFPS: number | null
  }

  export type VideoFeaturesMinAggregateOutputType = {
    id: number | null
    phoneId: number | null
    maxRsolution: string | null
    maxFPS: number | null
    slowmotion: boolean | null
    stereoSoundRec: boolean | null
  }

  export type VideoFeaturesMaxAggregateOutputType = {
    id: number | null
    phoneId: number | null
    maxRsolution: string | null
    maxFPS: number | null
    slowmotion: boolean | null
    stereoSoundRec: boolean | null
  }

  export type VideoFeaturesCountAggregateOutputType = {
    id: number
    phoneId: number
    maxRsolution: number
    maxFPS: number
    slowmotion: number
    stereoSoundRec: number
    _all: number
  }


  export type VideoFeaturesAvgAggregateInputType = {
    id?: true
    phoneId?: true
    maxFPS?: true
  }

  export type VideoFeaturesSumAggregateInputType = {
    id?: true
    phoneId?: true
    maxFPS?: true
  }

  export type VideoFeaturesMinAggregateInputType = {
    id?: true
    phoneId?: true
    maxRsolution?: true
    maxFPS?: true
    slowmotion?: true
    stereoSoundRec?: true
  }

  export type VideoFeaturesMaxAggregateInputType = {
    id?: true
    phoneId?: true
    maxRsolution?: true
    maxFPS?: true
    slowmotion?: true
    stereoSoundRec?: true
  }

  export type VideoFeaturesCountAggregateInputType = {
    id?: true
    phoneId?: true
    maxRsolution?: true
    maxFPS?: true
    slowmotion?: true
    stereoSoundRec?: true
    _all?: true
  }

  export type VideoFeaturesAggregateArgs = {
    /**
     * Filter which VideoFeatures to aggregate.
     * 
    **/
    where?: VideoFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<VideoFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VideoFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VideoFeatures
    **/
    _count?: true | VideoFeaturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoFeaturesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoFeaturesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoFeaturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoFeaturesMaxAggregateInputType
  }

  export type GetVideoFeaturesAggregateType<T extends VideoFeaturesAggregateArgs> = {
        [P in keyof T & keyof AggregateVideoFeatures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideoFeatures[P]>
      : GetScalarType<T[P], AggregateVideoFeatures[P]>
  }




  export type VideoFeaturesGroupByArgs = {
    where?: VideoFeaturesWhereInput
    orderBy?: Enumerable<VideoFeaturesOrderByWithAggregationInput>
    by: Array<VideoFeaturesScalarFieldEnum>
    having?: VideoFeaturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoFeaturesCountAggregateInputType | true
    _avg?: VideoFeaturesAvgAggregateInputType
    _sum?: VideoFeaturesSumAggregateInputType
    _min?: VideoFeaturesMinAggregateInputType
    _max?: VideoFeaturesMaxAggregateInputType
  }


  export type VideoFeaturesGroupByOutputType = {
    id: number
    phoneId: number
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
    _count: VideoFeaturesCountAggregateOutputType | null
    _avg: VideoFeaturesAvgAggregateOutputType | null
    _sum: VideoFeaturesSumAggregateOutputType | null
    _min: VideoFeaturesMinAggregateOutputType | null
    _max: VideoFeaturesMaxAggregateOutputType | null
  }

  type GetVideoFeaturesGroupByPayload<T extends VideoFeaturesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VideoFeaturesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoFeaturesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoFeaturesGroupByOutputType[P]>
            : GetScalarType<T[P], VideoFeaturesGroupByOutputType[P]>
        }
      >
    >


  export type VideoFeaturesSelect = {
    id?: boolean
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
    maxRsolution?: boolean
    maxFPS?: boolean
    slowmotion?: boolean
    stereoSoundRec?: boolean
  }

  export type VideoFeaturesInclude = {
    cellphones?: boolean | CellphoneArgs
  }

  export type VideoFeaturesGetPayload<
    S extends boolean | null | undefined | VideoFeaturesArgs,
    U = keyof S
      > = S extends true
        ? VideoFeatures
    : S extends undefined
    ? never
    : S extends VideoFeaturesArgs | VideoFeaturesFindManyArgs
    ?'include' extends U
    ? VideoFeatures  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof VideoFeatures ? VideoFeatures[P] : never
  } 
    : VideoFeatures
  : VideoFeatures


  type VideoFeaturesCountArgs = Merge<
    Omit<VideoFeaturesFindManyArgs, 'select' | 'include'> & {
      select?: VideoFeaturesCountAggregateInputType | true
    }
  >

  export interface VideoFeaturesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one VideoFeatures that matches the filter.
     * @param {VideoFeaturesFindUniqueArgs} args - Arguments to find a VideoFeatures
     * @example
     * // Get one VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VideoFeaturesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VideoFeaturesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'VideoFeatures'> extends True ? CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures | null, null>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T> | null, null>>

    /**
     * Find the first VideoFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesFindFirstArgs} args - Arguments to find a VideoFeatures
     * @example
     * // Get one VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VideoFeaturesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VideoFeaturesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'VideoFeatures'> extends True ? CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>> : CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures | null, null>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T> | null, null>>

    /**
     * Find zero or more VideoFeatures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findMany()
     * 
     * // Get first 10 VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoFeaturesWithIdOnly = await prisma.videoFeatures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VideoFeaturesFindManyArgs>(
      args?: SelectSubset<T, VideoFeaturesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<VideoFeatures>>, PrismaPromise<Array<VideoFeaturesGetPayload<T>>>>

    /**
     * Create a VideoFeatures.
     * @param {VideoFeaturesCreateArgs} args - Arguments to create a VideoFeatures.
     * @example
     * // Create one VideoFeatures
     * const VideoFeatures = await prisma.videoFeatures.create({
     *   data: {
     *     // ... data to create a VideoFeatures
     *   }
     * })
     * 
    **/
    create<T extends VideoFeaturesCreateArgs>(
      args: SelectSubset<T, VideoFeaturesCreateArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Create many VideoFeatures.
     *     @param {VideoFeaturesCreateManyArgs} args - Arguments to create many VideoFeatures.
     *     @example
     *     // Create many VideoFeatures
     *     const videoFeatures = await prisma.videoFeatures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VideoFeaturesCreateManyArgs>(
      args?: SelectSubset<T, VideoFeaturesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a VideoFeatures.
     * @param {VideoFeaturesDeleteArgs} args - Arguments to delete one VideoFeatures.
     * @example
     * // Delete one VideoFeatures
     * const VideoFeatures = await prisma.videoFeatures.delete({
     *   where: {
     *     // ... filter to delete one VideoFeatures
     *   }
     * })
     * 
    **/
    delete<T extends VideoFeaturesDeleteArgs>(
      args: SelectSubset<T, VideoFeaturesDeleteArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Update one VideoFeatures.
     * @param {VideoFeaturesUpdateArgs} args - Arguments to update one VideoFeatures.
     * @example
     * // Update one VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VideoFeaturesUpdateArgs>(
      args: SelectSubset<T, VideoFeaturesUpdateArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Delete zero or more VideoFeatures.
     * @param {VideoFeaturesDeleteManyArgs} args - Arguments to filter VideoFeatures to delete.
     * @example
     * // Delete a few VideoFeatures
     * const { count } = await prisma.videoFeatures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VideoFeaturesDeleteManyArgs>(
      args?: SelectSubset<T, VideoFeaturesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more VideoFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VideoFeaturesUpdateManyArgs>(
      args: SelectSubset<T, VideoFeaturesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one VideoFeatures.
     * @param {VideoFeaturesUpsertArgs} args - Arguments to update or create a VideoFeatures.
     * @example
     * // Update or create a VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.upsert({
     *   create: {
     *     // ... data to create a VideoFeatures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VideoFeatures we want to update
     *   }
     * })
    **/
    upsert<T extends VideoFeaturesUpsertArgs>(
      args: SelectSubset<T, VideoFeaturesUpsertArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Find one VideoFeatures that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VideoFeaturesFindUniqueOrThrowArgs} args - Arguments to find a VideoFeatures
     * @example
     * // Get one VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VideoFeaturesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VideoFeaturesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Find the first VideoFeatures that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesFindFirstOrThrowArgs} args - Arguments to find a VideoFeatures
     * @example
     * // Get one VideoFeatures
     * const videoFeatures = await prisma.videoFeatures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VideoFeaturesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VideoFeaturesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VideoFeaturesClient<VideoFeatures>, Prisma__VideoFeaturesClient<VideoFeaturesGetPayload<T>>>

    /**
     * Count the number of VideoFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesCountArgs} args - Arguments to filter VideoFeatures to count.
     * @example
     * // Count the number of VideoFeatures
     * const count = await prisma.videoFeatures.count({
     *   where: {
     *     // ... the filter for the VideoFeatures we want to count
     *   }
     * })
    **/
    count<T extends VideoFeaturesCountArgs>(
      args?: Subset<T, VideoFeaturesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoFeaturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VideoFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoFeaturesAggregateArgs>(args: Subset<T, VideoFeaturesAggregateArgs>): PrismaPromise<GetVideoFeaturesAggregateType<T>>

    /**
     * Group by VideoFeatures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFeaturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoFeaturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoFeaturesGroupByArgs['orderBy'] }
        : { orderBy?: VideoFeaturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoFeaturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoFeaturesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for VideoFeatures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VideoFeaturesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * VideoFeatures base type for findUnique actions
   */
  export type VideoFeaturesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * Filter, which VideoFeatures to fetch.
     * 
    **/
    where: VideoFeaturesWhereUniqueInput
  }

  /**
   * VideoFeatures: findUnique
   */
  export interface VideoFeaturesFindUniqueArgs extends VideoFeaturesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VideoFeatures base type for findFirst actions
   */
  export type VideoFeaturesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * Filter, which VideoFeatures to fetch.
     * 
    **/
    where?: VideoFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<VideoFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VideoFeatures.
     * 
    **/
    cursor?: VideoFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoFeatures.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VideoFeatures.
     * 
    **/
    distinct?: Enumerable<VideoFeaturesScalarFieldEnum>
  }

  /**
   * VideoFeatures: findFirst
   */
  export interface VideoFeaturesFindFirstArgs extends VideoFeaturesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * VideoFeatures findMany
   */
  export type VideoFeaturesFindManyArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * Filter, which VideoFeatures to fetch.
     * 
    **/
    where?: VideoFeaturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VideoFeatures to fetch.
     * 
    **/
    orderBy?: Enumerable<VideoFeaturesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VideoFeatures.
     * 
    **/
    cursor?: VideoFeaturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VideoFeatures from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VideoFeatures.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VideoFeaturesScalarFieldEnum>
  }


  /**
   * VideoFeatures create
   */
  export type VideoFeaturesCreateArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * The data needed to create a VideoFeatures.
     * 
    **/
    data: XOR<VideoFeaturesCreateInput, VideoFeaturesUncheckedCreateInput>
  }


  /**
   * VideoFeatures createMany
   */
  export type VideoFeaturesCreateManyArgs = {
    /**
     * The data used to create many VideoFeatures.
     * 
    **/
    data: Enumerable<VideoFeaturesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * VideoFeatures update
   */
  export type VideoFeaturesUpdateArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * The data needed to update a VideoFeatures.
     * 
    **/
    data: XOR<VideoFeaturesUpdateInput, VideoFeaturesUncheckedUpdateInput>
    /**
     * Choose, which VideoFeatures to update.
     * 
    **/
    where: VideoFeaturesWhereUniqueInput
  }


  /**
   * VideoFeatures updateMany
   */
  export type VideoFeaturesUpdateManyArgs = {
    /**
     * The data used to update VideoFeatures.
     * 
    **/
    data: XOR<VideoFeaturesUpdateManyMutationInput, VideoFeaturesUncheckedUpdateManyInput>
    /**
     * Filter which VideoFeatures to update
     * 
    **/
    where?: VideoFeaturesWhereInput
  }


  /**
   * VideoFeatures upsert
   */
  export type VideoFeaturesUpsertArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * The filter to search for the VideoFeatures to update in case it exists.
     * 
    **/
    where: VideoFeaturesWhereUniqueInput
    /**
     * In case the VideoFeatures found by the `where` argument doesn't exist, create a new VideoFeatures with this data.
     * 
    **/
    create: XOR<VideoFeaturesCreateInput, VideoFeaturesUncheckedCreateInput>
    /**
     * In case the VideoFeatures was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VideoFeaturesUpdateInput, VideoFeaturesUncheckedUpdateInput>
  }


  /**
   * VideoFeatures delete
   */
  export type VideoFeaturesDeleteArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
    /**
     * Filter which VideoFeatures to delete.
     * 
    **/
    where: VideoFeaturesWhereUniqueInput
  }


  /**
   * VideoFeatures deleteMany
   */
  export type VideoFeaturesDeleteManyArgs = {
    /**
     * Filter which VideoFeatures to delete
     * 
    **/
    where?: VideoFeaturesWhereInput
  }


  /**
   * VideoFeatures: findUniqueOrThrow
   */
  export type VideoFeaturesFindUniqueOrThrowArgs = VideoFeaturesFindUniqueArgsBase
      

  /**
   * VideoFeatures: findFirstOrThrow
   */
  export type VideoFeaturesFindFirstOrThrowArgs = VideoFeaturesFindFirstArgsBase
      

  /**
   * VideoFeatures without action
   */
  export type VideoFeaturesArgs = {
    /**
     * Select specific fields to fetch from the VideoFeatures
     * 
    **/
    select?: VideoFeaturesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VideoFeaturesInclude | null
  }



  /**
   * Model Accessoreis
   */


  export type AggregateAccessoreis = {
    _count: AccessoreisCountAggregateOutputType | null
    _avg: AccessoreisAvgAggregateOutputType | null
    _sum: AccessoreisSumAggregateOutputType | null
    _min: AccessoreisMinAggregateOutputType | null
    _max: AccessoreisMaxAggregateOutputType | null
  }

  export type AccessoreisAvgAggregateOutputType = {
    id: number | null
    phoneId: number | null
    chargerPower: number | null
  }

  export type AccessoreisSumAggregateOutputType = {
    id: number | null
    phoneId: number | null
    chargerPower: number | null
  }

  export type AccessoreisMinAggregateOutputType = {
    id: number | null
    phoneId: number | null
    earphone: boolean | null
    charger: boolean | null
    chargerPower: number | null
    pen: boolean | null
    phoneCase: boolean | null
    screenProtector: boolean | null
  }

  export type AccessoreisMaxAggregateOutputType = {
    id: number | null
    phoneId: number | null
    earphone: boolean | null
    charger: boolean | null
    chargerPower: number | null
    pen: boolean | null
    phoneCase: boolean | null
    screenProtector: boolean | null
  }

  export type AccessoreisCountAggregateOutputType = {
    id: number
    phoneId: number
    earphone: number
    charger: number
    chargerPower: number
    pen: number
    phoneCase: number
    screenProtector: number
    _all: number
  }


  export type AccessoreisAvgAggregateInputType = {
    id?: true
    phoneId?: true
    chargerPower?: true
  }

  export type AccessoreisSumAggregateInputType = {
    id?: true
    phoneId?: true
    chargerPower?: true
  }

  export type AccessoreisMinAggregateInputType = {
    id?: true
    phoneId?: true
    earphone?: true
    charger?: true
    chargerPower?: true
    pen?: true
    phoneCase?: true
    screenProtector?: true
  }

  export type AccessoreisMaxAggregateInputType = {
    id?: true
    phoneId?: true
    earphone?: true
    charger?: true
    chargerPower?: true
    pen?: true
    phoneCase?: true
    screenProtector?: true
  }

  export type AccessoreisCountAggregateInputType = {
    id?: true
    phoneId?: true
    earphone?: true
    charger?: true
    chargerPower?: true
    pen?: true
    phoneCase?: true
    screenProtector?: true
    _all?: true
  }

  export type AccessoreisAggregateArgs = {
    /**
     * Filter which Accessoreis to aggregate.
     * 
    **/
    where?: AccessoreisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accessoreis to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessoreisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AccessoreisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accessoreis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accessoreis.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accessoreis
    **/
    _count?: true | AccessoreisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessoreisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessoreisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessoreisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessoreisMaxAggregateInputType
  }

  export type GetAccessoreisAggregateType<T extends AccessoreisAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessoreis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessoreis[P]>
      : GetScalarType<T[P], AggregateAccessoreis[P]>
  }




  export type AccessoreisGroupByArgs = {
    where?: AccessoreisWhereInput
    orderBy?: Enumerable<AccessoreisOrderByWithAggregationInput>
    by: Array<AccessoreisScalarFieldEnum>
    having?: AccessoreisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessoreisCountAggregateInputType | true
    _avg?: AccessoreisAvgAggregateInputType
    _sum?: AccessoreisSumAggregateInputType
    _min?: AccessoreisMinAggregateInputType
    _max?: AccessoreisMaxAggregateInputType
  }


  export type AccessoreisGroupByOutputType = {
    id: number
    phoneId: number
    earphone: boolean
    charger: boolean
    chargerPower: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
    _count: AccessoreisCountAggregateOutputType | null
    _avg: AccessoreisAvgAggregateOutputType | null
    _sum: AccessoreisSumAggregateOutputType | null
    _min: AccessoreisMinAggregateOutputType | null
    _max: AccessoreisMaxAggregateOutputType | null
  }

  type GetAccessoreisGroupByPayload<T extends AccessoreisGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AccessoreisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessoreisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessoreisGroupByOutputType[P]>
            : GetScalarType<T[P], AccessoreisGroupByOutputType[P]>
        }
      >
    >


  export type AccessoreisSelect = {
    id?: boolean
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
    earphone?: boolean
    charger?: boolean
    chargerPower?: boolean
    pen?: boolean
    phoneCase?: boolean
    screenProtector?: boolean
  }

  export type AccessoreisInclude = {
    cellphones?: boolean | CellphoneArgs
  }

  export type AccessoreisGetPayload<
    S extends boolean | null | undefined | AccessoreisArgs,
    U = keyof S
      > = S extends true
        ? Accessoreis
    : S extends undefined
    ? never
    : S extends AccessoreisArgs | AccessoreisFindManyArgs
    ?'include' extends U
    ? Accessoreis  & {
    [P in TrueKeys<S['include']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Accessoreis ? Accessoreis[P] : never
  } 
    : Accessoreis
  : Accessoreis


  type AccessoreisCountArgs = Merge<
    Omit<AccessoreisFindManyArgs, 'select' | 'include'> & {
      select?: AccessoreisCountAggregateInputType | true
    }
  >

  export interface AccessoreisDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Accessoreis that matches the filter.
     * @param {AccessoreisFindUniqueArgs} args - Arguments to find a Accessoreis
     * @example
     * // Get one Accessoreis
     * const accessoreis = await prisma.accessoreis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccessoreisFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AccessoreisFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Accessoreis'> extends True ? CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>> : CheckSelect<T, Prisma__AccessoreisClient<Accessoreis | null, null>, Prisma__AccessoreisClient<AccessoreisGetPayload<T> | null, null>>

    /**
     * Find the first Accessoreis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisFindFirstArgs} args - Arguments to find a Accessoreis
     * @example
     * // Get one Accessoreis
     * const accessoreis = await prisma.accessoreis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccessoreisFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AccessoreisFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Accessoreis'> extends True ? CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>> : CheckSelect<T, Prisma__AccessoreisClient<Accessoreis | null, null>, Prisma__AccessoreisClient<AccessoreisGetPayload<T> | null, null>>

    /**
     * Find zero or more Accessoreis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accessoreis
     * const accessoreis = await prisma.accessoreis.findMany()
     * 
     * // Get first 10 Accessoreis
     * const accessoreis = await prisma.accessoreis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessoreisWithIdOnly = await prisma.accessoreis.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccessoreisFindManyArgs>(
      args?: SelectSubset<T, AccessoreisFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Accessoreis>>, PrismaPromise<Array<AccessoreisGetPayload<T>>>>

    /**
     * Create a Accessoreis.
     * @param {AccessoreisCreateArgs} args - Arguments to create a Accessoreis.
     * @example
     * // Create one Accessoreis
     * const Accessoreis = await prisma.accessoreis.create({
     *   data: {
     *     // ... data to create a Accessoreis
     *   }
     * })
     * 
    **/
    create<T extends AccessoreisCreateArgs>(
      args: SelectSubset<T, AccessoreisCreateArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Create many Accessoreis.
     *     @param {AccessoreisCreateManyArgs} args - Arguments to create many Accessoreis.
     *     @example
     *     // Create many Accessoreis
     *     const accessoreis = await prisma.accessoreis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccessoreisCreateManyArgs>(
      args?: SelectSubset<T, AccessoreisCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Accessoreis.
     * @param {AccessoreisDeleteArgs} args - Arguments to delete one Accessoreis.
     * @example
     * // Delete one Accessoreis
     * const Accessoreis = await prisma.accessoreis.delete({
     *   where: {
     *     // ... filter to delete one Accessoreis
     *   }
     * })
     * 
    **/
    delete<T extends AccessoreisDeleteArgs>(
      args: SelectSubset<T, AccessoreisDeleteArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Update one Accessoreis.
     * @param {AccessoreisUpdateArgs} args - Arguments to update one Accessoreis.
     * @example
     * // Update one Accessoreis
     * const accessoreis = await prisma.accessoreis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccessoreisUpdateArgs>(
      args: SelectSubset<T, AccessoreisUpdateArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Delete zero or more Accessoreis.
     * @param {AccessoreisDeleteManyArgs} args - Arguments to filter Accessoreis to delete.
     * @example
     * // Delete a few Accessoreis
     * const { count } = await prisma.accessoreis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccessoreisDeleteManyArgs>(
      args?: SelectSubset<T, AccessoreisDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accessoreis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accessoreis
     * const accessoreis = await prisma.accessoreis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccessoreisUpdateManyArgs>(
      args: SelectSubset<T, AccessoreisUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Accessoreis.
     * @param {AccessoreisUpsertArgs} args - Arguments to update or create a Accessoreis.
     * @example
     * // Update or create a Accessoreis
     * const accessoreis = await prisma.accessoreis.upsert({
     *   create: {
     *     // ... data to create a Accessoreis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Accessoreis we want to update
     *   }
     * })
    **/
    upsert<T extends AccessoreisUpsertArgs>(
      args: SelectSubset<T, AccessoreisUpsertArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Find one Accessoreis that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {AccessoreisFindUniqueOrThrowArgs} args - Arguments to find a Accessoreis
     * @example
     * // Get one Accessoreis
     * const accessoreis = await prisma.accessoreis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccessoreisFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AccessoreisFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Find the first Accessoreis that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisFindFirstOrThrowArgs} args - Arguments to find a Accessoreis
     * @example
     * // Get one Accessoreis
     * const accessoreis = await prisma.accessoreis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccessoreisFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AccessoreisFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__AccessoreisClient<Accessoreis>, Prisma__AccessoreisClient<AccessoreisGetPayload<T>>>

    /**
     * Count the number of Accessoreis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisCountArgs} args - Arguments to filter Accessoreis to count.
     * @example
     * // Count the number of Accessoreis
     * const count = await prisma.accessoreis.count({
     *   where: {
     *     // ... the filter for the Accessoreis we want to count
     *   }
     * })
    **/
    count<T extends AccessoreisCountArgs>(
      args?: Subset<T, AccessoreisCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessoreisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Accessoreis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessoreisAggregateArgs>(args: Subset<T, AccessoreisAggregateArgs>): PrismaPromise<GetAccessoreisAggregateType<T>>

    /**
     * Group by Accessoreis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessoreisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessoreisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessoreisGroupByArgs['orderBy'] }
        : { orderBy?: AccessoreisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessoreisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessoreisGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Accessoreis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AccessoreisClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Accessoreis base type for findUnique actions
   */
  export type AccessoreisFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * Filter, which Accessoreis to fetch.
     * 
    **/
    where: AccessoreisWhereUniqueInput
  }

  /**
   * Accessoreis: findUnique
   */
  export interface AccessoreisFindUniqueArgs extends AccessoreisFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Accessoreis base type for findFirst actions
   */
  export type AccessoreisFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * Filter, which Accessoreis to fetch.
     * 
    **/
    where?: AccessoreisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accessoreis to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessoreisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accessoreis.
     * 
    **/
    cursor?: AccessoreisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accessoreis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accessoreis.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accessoreis.
     * 
    **/
    distinct?: Enumerable<AccessoreisScalarFieldEnum>
  }

  /**
   * Accessoreis: findFirst
   */
  export interface AccessoreisFindFirstArgs extends AccessoreisFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Accessoreis findMany
   */
  export type AccessoreisFindManyArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * Filter, which Accessoreis to fetch.
     * 
    **/
    where?: AccessoreisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accessoreis to fetch.
     * 
    **/
    orderBy?: Enumerable<AccessoreisOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accessoreis.
     * 
    **/
    cursor?: AccessoreisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accessoreis from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accessoreis.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AccessoreisScalarFieldEnum>
  }


  /**
   * Accessoreis create
   */
  export type AccessoreisCreateArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * The data needed to create a Accessoreis.
     * 
    **/
    data: XOR<AccessoreisCreateInput, AccessoreisUncheckedCreateInput>
  }


  /**
   * Accessoreis createMany
   */
  export type AccessoreisCreateManyArgs = {
    /**
     * The data used to create many Accessoreis.
     * 
    **/
    data: Enumerable<AccessoreisCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Accessoreis update
   */
  export type AccessoreisUpdateArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * The data needed to update a Accessoreis.
     * 
    **/
    data: XOR<AccessoreisUpdateInput, AccessoreisUncheckedUpdateInput>
    /**
     * Choose, which Accessoreis to update.
     * 
    **/
    where: AccessoreisWhereUniqueInput
  }


  /**
   * Accessoreis updateMany
   */
  export type AccessoreisUpdateManyArgs = {
    /**
     * The data used to update Accessoreis.
     * 
    **/
    data: XOR<AccessoreisUpdateManyMutationInput, AccessoreisUncheckedUpdateManyInput>
    /**
     * Filter which Accessoreis to update
     * 
    **/
    where?: AccessoreisWhereInput
  }


  /**
   * Accessoreis upsert
   */
  export type AccessoreisUpsertArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * The filter to search for the Accessoreis to update in case it exists.
     * 
    **/
    where: AccessoreisWhereUniqueInput
    /**
     * In case the Accessoreis found by the `where` argument doesn't exist, create a new Accessoreis with this data.
     * 
    **/
    create: XOR<AccessoreisCreateInput, AccessoreisUncheckedCreateInput>
    /**
     * In case the Accessoreis was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AccessoreisUpdateInput, AccessoreisUncheckedUpdateInput>
  }


  /**
   * Accessoreis delete
   */
  export type AccessoreisDeleteArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
    /**
     * Filter which Accessoreis to delete.
     * 
    **/
    where: AccessoreisWhereUniqueInput
  }


  /**
   * Accessoreis deleteMany
   */
  export type AccessoreisDeleteManyArgs = {
    /**
     * Filter which Accessoreis to delete
     * 
    **/
    where?: AccessoreisWhereInput
  }


  /**
   * Accessoreis: findUniqueOrThrow
   */
  export type AccessoreisFindUniqueOrThrowArgs = AccessoreisFindUniqueArgsBase
      

  /**
   * Accessoreis: findFirstOrThrow
   */
  export type AccessoreisFindFirstOrThrowArgs = AccessoreisFindFirstArgsBase
      

  /**
   * Accessoreis without action
   */
  export type AccessoreisArgs = {
    /**
     * Select specific fields to fetch from the Accessoreis
     * 
    **/
    select?: AccessoreisSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: AccessoreisInclude | null
  }



  /**
   * Model UserRating
   */


  export type AggregateUserRating = {
    _count: UserRatingCountAggregateOutputType | null
    _avg: UserRatingAvgAggregateOutputType | null
    _sum: UserRatingSumAggregateOutputType | null
    _min: UserRatingMinAggregateOutputType | null
    _max: UserRatingMaxAggregateOutputType | null
  }

  export type UserRatingAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    rate: number | null
  }

  export type UserRatingSumAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    rate: number | null
  }

  export type UserRatingMinAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    rate: number | null
  }

  export type UserRatingMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    rate: number | null
  }

  export type UserRatingCountAggregateOutputType = {
    id: number
    userId: number
    phoneId: number
    rate: number
    _all: number
  }


  export type UserRatingAvgAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    rate?: true
  }

  export type UserRatingSumAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    rate?: true
  }

  export type UserRatingMinAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    rate?: true
  }

  export type UserRatingMaxAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    rate?: true
  }

  export type UserRatingCountAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    rate?: true
    _all?: true
  }

  export type UserRatingAggregateArgs = {
    /**
     * Filter which UserRating to aggregate.
     * 
    **/
    where?: UserRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRatings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRatings
    **/
    _count?: true | UserRatingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserRatingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserRatingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRatingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRatingMaxAggregateInputType
  }

  export type GetUserRatingAggregateType<T extends UserRatingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRating]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRating[P]>
      : GetScalarType<T[P], AggregateUserRating[P]>
  }




  export type UserRatingGroupByArgs = {
    where?: UserRatingWhereInput
    orderBy?: Enumerable<UserRatingOrderByWithAggregationInput>
    by: Array<UserRatingScalarFieldEnum>
    having?: UserRatingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRatingCountAggregateInputType | true
    _avg?: UserRatingAvgAggregateInputType
    _sum?: UserRatingSumAggregateInputType
    _min?: UserRatingMinAggregateInputType
    _max?: UserRatingMaxAggregateInputType
  }


  export type UserRatingGroupByOutputType = {
    id: number
    userId: number
    phoneId: number
    rate: number
    _count: UserRatingCountAggregateOutputType | null
    _avg: UserRatingAvgAggregateOutputType | null
    _sum: UserRatingSumAggregateOutputType | null
    _min: UserRatingMinAggregateOutputType | null
    _max: UserRatingMaxAggregateOutputType | null
  }

  type GetUserRatingGroupByPayload<T extends UserRatingGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserRatingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRatingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRatingGroupByOutputType[P]>
            : GetScalarType<T[P], UserRatingGroupByOutputType[P]>
        }
      >
    >


  export type UserRatingSelect = {
    id?: boolean
    userId?: boolean
    users?: boolean | UserArgs
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
    rate?: boolean
  }

  export type UserRatingInclude = {
    users?: boolean | UserArgs
    cellphones?: boolean | CellphoneArgs
  }

  export type UserRatingGetPayload<
    S extends boolean | null | undefined | UserRatingArgs,
    U = keyof S
      > = S extends true
        ? UserRating
    : S extends undefined
    ? never
    : S extends UserRatingArgs | UserRatingFindManyArgs
    ?'include' extends U
    ? UserRating  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserRating ? UserRating[P] : never
  } 
    : UserRating
  : UserRating


  type UserRatingCountArgs = Merge<
    Omit<UserRatingFindManyArgs, 'select' | 'include'> & {
      select?: UserRatingCountAggregateInputType | true
    }
  >

  export interface UserRatingDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserRating that matches the filter.
     * @param {UserRatingFindUniqueArgs} args - Arguments to find a UserRating
     * @example
     * // Get one UserRating
     * const userRating = await prisma.userRating.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserRatingFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserRatingFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserRating'> extends True ? CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>> : CheckSelect<T, Prisma__UserRatingClient<UserRating | null, null>, Prisma__UserRatingClient<UserRatingGetPayload<T> | null, null>>

    /**
     * Find the first UserRating that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingFindFirstArgs} args - Arguments to find a UserRating
     * @example
     * // Get one UserRating
     * const userRating = await prisma.userRating.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserRatingFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserRatingFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserRating'> extends True ? CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>> : CheckSelect<T, Prisma__UserRatingClient<UserRating | null, null>, Prisma__UserRatingClient<UserRatingGetPayload<T> | null, null>>

    /**
     * Find zero or more UserRatings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRatings
     * const userRatings = await prisma.userRating.findMany()
     * 
     * // Get first 10 UserRatings
     * const userRatings = await prisma.userRating.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userRatingWithIdOnly = await prisma.userRating.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserRatingFindManyArgs>(
      args?: SelectSubset<T, UserRatingFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserRating>>, PrismaPromise<Array<UserRatingGetPayload<T>>>>

    /**
     * Create a UserRating.
     * @param {UserRatingCreateArgs} args - Arguments to create a UserRating.
     * @example
     * // Create one UserRating
     * const UserRating = await prisma.userRating.create({
     *   data: {
     *     // ... data to create a UserRating
     *   }
     * })
     * 
    **/
    create<T extends UserRatingCreateArgs>(
      args: SelectSubset<T, UserRatingCreateArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Create many UserRatings.
     *     @param {UserRatingCreateManyArgs} args - Arguments to create many UserRatings.
     *     @example
     *     // Create many UserRatings
     *     const userRating = await prisma.userRating.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserRatingCreateManyArgs>(
      args?: SelectSubset<T, UserRatingCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserRating.
     * @param {UserRatingDeleteArgs} args - Arguments to delete one UserRating.
     * @example
     * // Delete one UserRating
     * const UserRating = await prisma.userRating.delete({
     *   where: {
     *     // ... filter to delete one UserRating
     *   }
     * })
     * 
    **/
    delete<T extends UserRatingDeleteArgs>(
      args: SelectSubset<T, UserRatingDeleteArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Update one UserRating.
     * @param {UserRatingUpdateArgs} args - Arguments to update one UserRating.
     * @example
     * // Update one UserRating
     * const userRating = await prisma.userRating.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserRatingUpdateArgs>(
      args: SelectSubset<T, UserRatingUpdateArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Delete zero or more UserRatings.
     * @param {UserRatingDeleteManyArgs} args - Arguments to filter UserRatings to delete.
     * @example
     * // Delete a few UserRatings
     * const { count } = await prisma.userRating.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserRatingDeleteManyArgs>(
      args?: SelectSubset<T, UserRatingDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRatings
     * const userRating = await prisma.userRating.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserRatingUpdateManyArgs>(
      args: SelectSubset<T, UserRatingUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRating.
     * @param {UserRatingUpsertArgs} args - Arguments to update or create a UserRating.
     * @example
     * // Update or create a UserRating
     * const userRating = await prisma.userRating.upsert({
     *   create: {
     *     // ... data to create a UserRating
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRating we want to update
     *   }
     * })
    **/
    upsert<T extends UserRatingUpsertArgs>(
      args: SelectSubset<T, UserRatingUpsertArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Find one UserRating that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserRatingFindUniqueOrThrowArgs} args - Arguments to find a UserRating
     * @example
     * // Get one UserRating
     * const userRating = await prisma.userRating.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserRatingFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserRatingFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Find the first UserRating that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingFindFirstOrThrowArgs} args - Arguments to find a UserRating
     * @example
     * // Get one UserRating
     * const userRating = await prisma.userRating.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserRatingFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserRatingFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserRatingClient<UserRating>, Prisma__UserRatingClient<UserRatingGetPayload<T>>>

    /**
     * Count the number of UserRatings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingCountArgs} args - Arguments to filter UserRatings to count.
     * @example
     * // Count the number of UserRatings
     * const count = await prisma.userRating.count({
     *   where: {
     *     // ... the filter for the UserRatings we want to count
     *   }
     * })
    **/
    count<T extends UserRatingCountArgs>(
      args?: Subset<T, UserRatingCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRatingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRatingAggregateArgs>(args: Subset<T, UserRatingAggregateArgs>): PrismaPromise<GetUserRatingAggregateType<T>>

    /**
     * Group by UserRating.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRatingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRatingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRatingGroupByArgs['orderBy'] }
        : { orderBy?: UserRatingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRatingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRatingGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRating.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserRatingClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserRating base type for findUnique actions
   */
  export type UserRatingFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * Filter, which UserRating to fetch.
     * 
    **/
    where: UserRatingWhereUniqueInput
  }

  /**
   * UserRating: findUnique
   */
  export interface UserRatingFindUniqueArgs extends UserRatingFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRating base type for findFirst actions
   */
  export type UserRatingFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * Filter, which UserRating to fetch.
     * 
    **/
    where?: UserRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRatings.
     * 
    **/
    cursor?: UserRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRatings.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRatings.
     * 
    **/
    distinct?: Enumerable<UserRatingScalarFieldEnum>
  }

  /**
   * UserRating: findFirst
   */
  export interface UserRatingFindFirstArgs extends UserRatingFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserRating findMany
   */
  export type UserRatingFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * Filter, which UserRatings to fetch.
     * 
    **/
    where?: UserRatingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRatings to fetch.
     * 
    **/
    orderBy?: Enumerable<UserRatingOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRatings.
     * 
    **/
    cursor?: UserRatingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRatings from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRatings.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserRatingScalarFieldEnum>
  }


  /**
   * UserRating create
   */
  export type UserRatingCreateArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * The data needed to create a UserRating.
     * 
    **/
    data: XOR<UserRatingCreateInput, UserRatingUncheckedCreateInput>
  }


  /**
   * UserRating createMany
   */
  export type UserRatingCreateManyArgs = {
    /**
     * The data used to create many UserRatings.
     * 
    **/
    data: Enumerable<UserRatingCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserRating update
   */
  export type UserRatingUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * The data needed to update a UserRating.
     * 
    **/
    data: XOR<UserRatingUpdateInput, UserRatingUncheckedUpdateInput>
    /**
     * Choose, which UserRating to update.
     * 
    **/
    where: UserRatingWhereUniqueInput
  }


  /**
   * UserRating updateMany
   */
  export type UserRatingUpdateManyArgs = {
    /**
     * The data used to update UserRatings.
     * 
    **/
    data: XOR<UserRatingUpdateManyMutationInput, UserRatingUncheckedUpdateManyInput>
    /**
     * Filter which UserRatings to update
     * 
    **/
    where?: UserRatingWhereInput
  }


  /**
   * UserRating upsert
   */
  export type UserRatingUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * The filter to search for the UserRating to update in case it exists.
     * 
    **/
    where: UserRatingWhereUniqueInput
    /**
     * In case the UserRating found by the `where` argument doesn't exist, create a new UserRating with this data.
     * 
    **/
    create: XOR<UserRatingCreateInput, UserRatingUncheckedCreateInput>
    /**
     * In case the UserRating was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserRatingUpdateInput, UserRatingUncheckedUpdateInput>
  }


  /**
   * UserRating delete
   */
  export type UserRatingDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
    /**
     * Filter which UserRating to delete.
     * 
    **/
    where: UserRatingWhereUniqueInput
  }


  /**
   * UserRating deleteMany
   */
  export type UserRatingDeleteManyArgs = {
    /**
     * Filter which UserRatings to delete
     * 
    **/
    where?: UserRatingWhereInput
  }


  /**
   * UserRating: findUniqueOrThrow
   */
  export type UserRatingFindUniqueOrThrowArgs = UserRatingFindUniqueArgsBase
      

  /**
   * UserRating: findFirstOrThrow
   */
  export type UserRatingFindFirstOrThrowArgs = UserRatingFindFirstArgsBase
      

  /**
   * UserRating without action
   */
  export type UserRatingArgs = {
    /**
     * Select specific fields to fetch from the UserRating
     * 
    **/
    select?: UserRatingSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserRatingInclude | null
  }



  /**
   * Model Commentaries
   */


  export type AggregateCommentaries = {
    _count: CommentariesCountAggregateOutputType | null
    _avg: CommentariesAvgAggregateOutputType | null
    _sum: CommentariesSumAggregateOutputType | null
    _min: CommentariesMinAggregateOutputType | null
    _max: CommentariesMaxAggregateOutputType | null
  }

  export type CommentariesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type CommentariesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type CommentariesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    commentary: string | null
  }

  export type CommentariesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
    commentary: string | null
  }

  export type CommentariesCountAggregateOutputType = {
    id: number
    userId: number
    phoneId: number
    commentary: number
    _all: number
  }


  export type CommentariesAvgAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type CommentariesSumAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type CommentariesMinAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    commentary?: true
  }

  export type CommentariesMaxAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    commentary?: true
  }

  export type CommentariesCountAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    commentary?: true
    _all?: true
  }

  export type CommentariesAggregateArgs = {
    /**
     * Filter which Commentaries to aggregate.
     * 
    **/
    where?: CommentariesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaries to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentariesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CommentariesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Commentaries
    **/
    _count?: true | CommentariesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CommentariesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CommentariesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentariesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentariesMaxAggregateInputType
  }

  export type GetCommentariesAggregateType<T extends CommentariesAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentaries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentaries[P]>
      : GetScalarType<T[P], AggregateCommentaries[P]>
  }




  export type CommentariesGroupByArgs = {
    where?: CommentariesWhereInput
    orderBy?: Enumerable<CommentariesOrderByWithAggregationInput>
    by: Array<CommentariesScalarFieldEnum>
    having?: CommentariesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentariesCountAggregateInputType | true
    _avg?: CommentariesAvgAggregateInputType
    _sum?: CommentariesSumAggregateInputType
    _min?: CommentariesMinAggregateInputType
    _max?: CommentariesMaxAggregateInputType
  }


  export type CommentariesGroupByOutputType = {
    id: number
    userId: number
    phoneId: number
    commentary: string
    _count: CommentariesCountAggregateOutputType | null
    _avg: CommentariesAvgAggregateOutputType | null
    _sum: CommentariesSumAggregateOutputType | null
    _min: CommentariesMinAggregateOutputType | null
    _max: CommentariesMaxAggregateOutputType | null
  }

  type GetCommentariesGroupByPayload<T extends CommentariesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CommentariesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentariesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentariesGroupByOutputType[P]>
            : GetScalarType<T[P], CommentariesGroupByOutputType[P]>
        }
      >
    >


  export type CommentariesSelect = {
    id?: boolean
    userId?: boolean
    users?: boolean | UserArgs
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
    commentary?: boolean
  }

  export type CommentariesInclude = {
    users?: boolean | UserArgs
    cellphones?: boolean | CellphoneArgs
  }

  export type CommentariesGetPayload<
    S extends boolean | null | undefined | CommentariesArgs,
    U = keyof S
      > = S extends true
        ? Commentaries
    : S extends undefined
    ? never
    : S extends CommentariesArgs | CommentariesFindManyArgs
    ?'include' extends U
    ? Commentaries  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Commentaries ? Commentaries[P] : never
  } 
    : Commentaries
  : Commentaries


  type CommentariesCountArgs = Merge<
    Omit<CommentariesFindManyArgs, 'select' | 'include'> & {
      select?: CommentariesCountAggregateInputType | true
    }
  >

  export interface CommentariesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Commentaries that matches the filter.
     * @param {CommentariesFindUniqueArgs} args - Arguments to find a Commentaries
     * @example
     * // Get one Commentaries
     * const commentaries = await prisma.commentaries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentariesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CommentariesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Commentaries'> extends True ? CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>> : CheckSelect<T, Prisma__CommentariesClient<Commentaries | null, null>, Prisma__CommentariesClient<CommentariesGetPayload<T> | null, null>>

    /**
     * Find the first Commentaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesFindFirstArgs} args - Arguments to find a Commentaries
     * @example
     * // Get one Commentaries
     * const commentaries = await prisma.commentaries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentariesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CommentariesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Commentaries'> extends True ? CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>> : CheckSelect<T, Prisma__CommentariesClient<Commentaries | null, null>, Prisma__CommentariesClient<CommentariesGetPayload<T> | null, null>>

    /**
     * Find zero or more Commentaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Commentaries
     * const commentaries = await prisma.commentaries.findMany()
     * 
     * // Get first 10 Commentaries
     * const commentaries = await prisma.commentaries.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentariesWithIdOnly = await prisma.commentaries.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentariesFindManyArgs>(
      args?: SelectSubset<T, CommentariesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Commentaries>>, PrismaPromise<Array<CommentariesGetPayload<T>>>>

    /**
     * Create a Commentaries.
     * @param {CommentariesCreateArgs} args - Arguments to create a Commentaries.
     * @example
     * // Create one Commentaries
     * const Commentaries = await prisma.commentaries.create({
     *   data: {
     *     // ... data to create a Commentaries
     *   }
     * })
     * 
    **/
    create<T extends CommentariesCreateArgs>(
      args: SelectSubset<T, CommentariesCreateArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Create many Commentaries.
     *     @param {CommentariesCreateManyArgs} args - Arguments to create many Commentaries.
     *     @example
     *     // Create many Commentaries
     *     const commentaries = await prisma.commentaries.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentariesCreateManyArgs>(
      args?: SelectSubset<T, CommentariesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Commentaries.
     * @param {CommentariesDeleteArgs} args - Arguments to delete one Commentaries.
     * @example
     * // Delete one Commentaries
     * const Commentaries = await prisma.commentaries.delete({
     *   where: {
     *     // ... filter to delete one Commentaries
     *   }
     * })
     * 
    **/
    delete<T extends CommentariesDeleteArgs>(
      args: SelectSubset<T, CommentariesDeleteArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Update one Commentaries.
     * @param {CommentariesUpdateArgs} args - Arguments to update one Commentaries.
     * @example
     * // Update one Commentaries
     * const commentaries = await prisma.commentaries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentariesUpdateArgs>(
      args: SelectSubset<T, CommentariesUpdateArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Delete zero or more Commentaries.
     * @param {CommentariesDeleteManyArgs} args - Arguments to filter Commentaries to delete.
     * @example
     * // Delete a few Commentaries
     * const { count } = await prisma.commentaries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentariesDeleteManyArgs>(
      args?: SelectSubset<T, CommentariesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Commentaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Commentaries
     * const commentaries = await prisma.commentaries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentariesUpdateManyArgs>(
      args: SelectSubset<T, CommentariesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Commentaries.
     * @param {CommentariesUpsertArgs} args - Arguments to update or create a Commentaries.
     * @example
     * // Update or create a Commentaries
     * const commentaries = await prisma.commentaries.upsert({
     *   create: {
     *     // ... data to create a Commentaries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Commentaries we want to update
     *   }
     * })
    **/
    upsert<T extends CommentariesUpsertArgs>(
      args: SelectSubset<T, CommentariesUpsertArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Find one Commentaries that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {CommentariesFindUniqueOrThrowArgs} args - Arguments to find a Commentaries
     * @example
     * // Get one Commentaries
     * const commentaries = await prisma.commentaries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentariesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CommentariesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Find the first Commentaries that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesFindFirstOrThrowArgs} args - Arguments to find a Commentaries
     * @example
     * // Get one Commentaries
     * const commentaries = await prisma.commentaries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentariesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CommentariesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__CommentariesClient<Commentaries>, Prisma__CommentariesClient<CommentariesGetPayload<T>>>

    /**
     * Count the number of Commentaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesCountArgs} args - Arguments to filter Commentaries to count.
     * @example
     * // Count the number of Commentaries
     * const count = await prisma.commentaries.count({
     *   where: {
     *     // ... the filter for the Commentaries we want to count
     *   }
     * })
    **/
    count<T extends CommentariesCountArgs>(
      args?: Subset<T, CommentariesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentariesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Commentaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentariesAggregateArgs>(args: Subset<T, CommentariesAggregateArgs>): PrismaPromise<GetCommentariesAggregateType<T>>

    /**
     * Group by Commentaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentariesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentariesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentariesGroupByArgs['orderBy'] }
        : { orderBy?: CommentariesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentariesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentariesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Commentaries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentariesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Commentaries base type for findUnique actions
   */
  export type CommentariesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * Filter, which Commentaries to fetch.
     * 
    **/
    where: CommentariesWhereUniqueInput
  }

  /**
   * Commentaries: findUnique
   */
  export interface CommentariesFindUniqueArgs extends CommentariesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Commentaries base type for findFirst actions
   */
  export type CommentariesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * Filter, which Commentaries to fetch.
     * 
    **/
    where?: CommentariesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaries to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentariesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Commentaries.
     * 
    **/
    cursor?: CommentariesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaries.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Commentaries.
     * 
    **/
    distinct?: Enumerable<CommentariesScalarFieldEnum>
  }

  /**
   * Commentaries: findFirst
   */
  export interface CommentariesFindFirstArgs extends CommentariesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Commentaries findMany
   */
  export type CommentariesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * Filter, which Commentaries to fetch.
     * 
    **/
    where?: CommentariesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Commentaries to fetch.
     * 
    **/
    orderBy?: Enumerable<CommentariesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Commentaries.
     * 
    **/
    cursor?: CommentariesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Commentaries from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Commentaries.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CommentariesScalarFieldEnum>
  }


  /**
   * Commentaries create
   */
  export type CommentariesCreateArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * The data needed to create a Commentaries.
     * 
    **/
    data: XOR<CommentariesCreateInput, CommentariesUncheckedCreateInput>
  }


  /**
   * Commentaries createMany
   */
  export type CommentariesCreateManyArgs = {
    /**
     * The data used to create many Commentaries.
     * 
    **/
    data: Enumerable<CommentariesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Commentaries update
   */
  export type CommentariesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * The data needed to update a Commentaries.
     * 
    **/
    data: XOR<CommentariesUpdateInput, CommentariesUncheckedUpdateInput>
    /**
     * Choose, which Commentaries to update.
     * 
    **/
    where: CommentariesWhereUniqueInput
  }


  /**
   * Commentaries updateMany
   */
  export type CommentariesUpdateManyArgs = {
    /**
     * The data used to update Commentaries.
     * 
    **/
    data: XOR<CommentariesUpdateManyMutationInput, CommentariesUncheckedUpdateManyInput>
    /**
     * Filter which Commentaries to update
     * 
    **/
    where?: CommentariesWhereInput
  }


  /**
   * Commentaries upsert
   */
  export type CommentariesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * The filter to search for the Commentaries to update in case it exists.
     * 
    **/
    where: CommentariesWhereUniqueInput
    /**
     * In case the Commentaries found by the `where` argument doesn't exist, create a new Commentaries with this data.
     * 
    **/
    create: XOR<CommentariesCreateInput, CommentariesUncheckedCreateInput>
    /**
     * In case the Commentaries was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CommentariesUpdateInput, CommentariesUncheckedUpdateInput>
  }


  /**
   * Commentaries delete
   */
  export type CommentariesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
    /**
     * Filter which Commentaries to delete.
     * 
    **/
    where: CommentariesWhereUniqueInput
  }


  /**
   * Commentaries deleteMany
   */
  export type CommentariesDeleteManyArgs = {
    /**
     * Filter which Commentaries to delete
     * 
    **/
    where?: CommentariesWhereInput
  }


  /**
   * Commentaries: findUniqueOrThrow
   */
  export type CommentariesFindUniqueOrThrowArgs = CommentariesFindUniqueArgsBase
      

  /**
   * Commentaries: findFirstOrThrow
   */
  export type CommentariesFindFirstOrThrowArgs = CommentariesFindFirstArgsBase
      

  /**
   * Commentaries without action
   */
  export type CommentariesArgs = {
    /**
     * Select specific fields to fetch from the Commentaries
     * 
    **/
    select?: CommentariesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CommentariesInclude | null
  }



  /**
   * Model UserFavorites
   */


  export type AggregateUserFavorites = {
    _count: UserFavoritesCountAggregateOutputType | null
    _avg: UserFavoritesAvgAggregateOutputType | null
    _sum: UserFavoritesSumAggregateOutputType | null
    _min: UserFavoritesMinAggregateOutputType | null
    _max: UserFavoritesMaxAggregateOutputType | null
  }

  export type UserFavoritesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type UserFavoritesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type UserFavoritesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type UserFavoritesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    phoneId: number | null
  }

  export type UserFavoritesCountAggregateOutputType = {
    id: number
    userId: number
    phoneId: number
    _all: number
  }


  export type UserFavoritesAvgAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type UserFavoritesSumAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type UserFavoritesMinAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type UserFavoritesMaxAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
  }

  export type UserFavoritesCountAggregateInputType = {
    id?: true
    userId?: true
    phoneId?: true
    _all?: true
  }

  export type UserFavoritesAggregateArgs = {
    /**
     * Filter which UserFavorites to aggregate.
     * 
    **/
    where?: UserFavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavorites to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFavoritesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserFavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavorites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserFavorites
    **/
    _count?: true | UserFavoritesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserFavoritesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserFavoritesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserFavoritesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserFavoritesMaxAggregateInputType
  }

  export type GetUserFavoritesAggregateType<T extends UserFavoritesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserFavorites]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserFavorites[P]>
      : GetScalarType<T[P], AggregateUserFavorites[P]>
  }




  export type UserFavoritesGroupByArgs = {
    where?: UserFavoritesWhereInput
    orderBy?: Enumerable<UserFavoritesOrderByWithAggregationInput>
    by: Array<UserFavoritesScalarFieldEnum>
    having?: UserFavoritesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserFavoritesCountAggregateInputType | true
    _avg?: UserFavoritesAvgAggregateInputType
    _sum?: UserFavoritesSumAggregateInputType
    _min?: UserFavoritesMinAggregateInputType
    _max?: UserFavoritesMaxAggregateInputType
  }


  export type UserFavoritesGroupByOutputType = {
    id: number
    userId: number
    phoneId: number
    _count: UserFavoritesCountAggregateOutputType | null
    _avg: UserFavoritesAvgAggregateOutputType | null
    _sum: UserFavoritesSumAggregateOutputType | null
    _min: UserFavoritesMinAggregateOutputType | null
    _max: UserFavoritesMaxAggregateOutputType | null
  }

  type GetUserFavoritesGroupByPayload<T extends UserFavoritesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserFavoritesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserFavoritesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserFavoritesGroupByOutputType[P]>
            : GetScalarType<T[P], UserFavoritesGroupByOutputType[P]>
        }
      >
    >


  export type UserFavoritesSelect = {
    id?: boolean
    userId?: boolean
    users?: boolean | UserArgs
    phoneId?: boolean
    cellphones?: boolean | CellphoneArgs
  }

  export type UserFavoritesInclude = {
    users?: boolean | UserArgs
    cellphones?: boolean | CellphoneArgs
  }

  export type UserFavoritesGetPayload<
    S extends boolean | null | undefined | UserFavoritesArgs,
    U = keyof S
      > = S extends true
        ? UserFavorites
    : S extends undefined
    ? never
    : S extends UserFavoritesArgs | UserFavoritesFindManyArgs
    ?'include' extends U
    ? UserFavorites  & {
    [P in TrueKeys<S['include']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'users' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'cellphones' ? CellphoneGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof UserFavorites ? UserFavorites[P] : never
  } 
    : UserFavorites
  : UserFavorites


  type UserFavoritesCountArgs = Merge<
    Omit<UserFavoritesFindManyArgs, 'select' | 'include'> & {
      select?: UserFavoritesCountAggregateInputType | true
    }
  >

  export interface UserFavoritesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one UserFavorites that matches the filter.
     * @param {UserFavoritesFindUniqueArgs} args - Arguments to find a UserFavorites
     * @example
     * // Get one UserFavorites
     * const userFavorites = await prisma.userFavorites.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFavoritesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFavoritesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'UserFavorites'> extends True ? CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>> : CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites | null, null>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T> | null, null>>

    /**
     * Find the first UserFavorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesFindFirstArgs} args - Arguments to find a UserFavorites
     * @example
     * // Get one UserFavorites
     * const userFavorites = await prisma.userFavorites.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFavoritesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFavoritesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'UserFavorites'> extends True ? CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>> : CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites | null, null>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T> | null, null>>

    /**
     * Find zero or more UserFavorites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserFavorites
     * const userFavorites = await prisma.userFavorites.findMany()
     * 
     * // Get first 10 UserFavorites
     * const userFavorites = await prisma.userFavorites.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userFavoritesWithIdOnly = await prisma.userFavorites.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFavoritesFindManyArgs>(
      args?: SelectSubset<T, UserFavoritesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<UserFavorites>>, PrismaPromise<Array<UserFavoritesGetPayload<T>>>>

    /**
     * Create a UserFavorites.
     * @param {UserFavoritesCreateArgs} args - Arguments to create a UserFavorites.
     * @example
     * // Create one UserFavorites
     * const UserFavorites = await prisma.userFavorites.create({
     *   data: {
     *     // ... data to create a UserFavorites
     *   }
     * })
     * 
    **/
    create<T extends UserFavoritesCreateArgs>(
      args: SelectSubset<T, UserFavoritesCreateArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Create many UserFavorites.
     *     @param {UserFavoritesCreateManyArgs} args - Arguments to create many UserFavorites.
     *     @example
     *     // Create many UserFavorites
     *     const userFavorites = await prisma.userFavorites.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserFavoritesCreateManyArgs>(
      args?: SelectSubset<T, UserFavoritesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a UserFavorites.
     * @param {UserFavoritesDeleteArgs} args - Arguments to delete one UserFavorites.
     * @example
     * // Delete one UserFavorites
     * const UserFavorites = await prisma.userFavorites.delete({
     *   where: {
     *     // ... filter to delete one UserFavorites
     *   }
     * })
     * 
    **/
    delete<T extends UserFavoritesDeleteArgs>(
      args: SelectSubset<T, UserFavoritesDeleteArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Update one UserFavorites.
     * @param {UserFavoritesUpdateArgs} args - Arguments to update one UserFavorites.
     * @example
     * // Update one UserFavorites
     * const userFavorites = await prisma.userFavorites.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserFavoritesUpdateArgs>(
      args: SelectSubset<T, UserFavoritesUpdateArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Delete zero or more UserFavorites.
     * @param {UserFavoritesDeleteManyArgs} args - Arguments to filter UserFavorites to delete.
     * @example
     * // Delete a few UserFavorites
     * const { count } = await prisma.userFavorites.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserFavoritesDeleteManyArgs>(
      args?: SelectSubset<T, UserFavoritesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserFavorites
     * const userFavorites = await prisma.userFavorites.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserFavoritesUpdateManyArgs>(
      args: SelectSubset<T, UserFavoritesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one UserFavorites.
     * @param {UserFavoritesUpsertArgs} args - Arguments to update or create a UserFavorites.
     * @example
     * // Update or create a UserFavorites
     * const userFavorites = await prisma.userFavorites.upsert({
     *   create: {
     *     // ... data to create a UserFavorites
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserFavorites we want to update
     *   }
     * })
    **/
    upsert<T extends UserFavoritesUpsertArgs>(
      args: SelectSubset<T, UserFavoritesUpsertArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Find one UserFavorites that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFavoritesFindUniqueOrThrowArgs} args - Arguments to find a UserFavorites
     * @example
     * // Get one UserFavorites
     * const userFavorites = await prisma.userFavorites.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFavoritesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFavoritesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Find the first UserFavorites that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesFindFirstOrThrowArgs} args - Arguments to find a UserFavorites
     * @example
     * // Get one UserFavorites
     * const userFavorites = await prisma.userFavorites.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFavoritesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFavoritesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserFavoritesClient<UserFavorites>, Prisma__UserFavoritesClient<UserFavoritesGetPayload<T>>>

    /**
     * Count the number of UserFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesCountArgs} args - Arguments to filter UserFavorites to count.
     * @example
     * // Count the number of UserFavorites
     * const count = await prisma.userFavorites.count({
     *   where: {
     *     // ... the filter for the UserFavorites we want to count
     *   }
     * })
    **/
    count<T extends UserFavoritesCountArgs>(
      args?: Subset<T, UserFavoritesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserFavoritesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserFavoritesAggregateArgs>(args: Subset<T, UserFavoritesAggregateArgs>): PrismaPromise<GetUserFavoritesAggregateType<T>>

    /**
     * Group by UserFavorites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFavoritesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserFavoritesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserFavoritesGroupByArgs['orderBy'] }
        : { orderBy?: UserFavoritesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserFavoritesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserFavoritesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for UserFavorites.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserFavoritesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | Null>, Prisma__UserClient<UserGetPayload<T> | Null>>;

    cellphones<T extends CellphoneArgs = {}>(args?: Subset<T, CellphoneArgs>): CheckSelect<T, Prisma__CellphoneClient<Cellphone | Null>, Prisma__CellphoneClient<CellphoneGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * UserFavorites base type for findUnique actions
   */
  export type UserFavoritesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * Filter, which UserFavorites to fetch.
     * 
    **/
    where: UserFavoritesWhereUniqueInput
  }

  /**
   * UserFavorites: findUnique
   */
  export interface UserFavoritesFindUniqueArgs extends UserFavoritesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFavorites base type for findFirst actions
   */
  export type UserFavoritesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * Filter, which UserFavorites to fetch.
     * 
    **/
    where?: UserFavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavorites to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFavoritesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserFavorites.
     * 
    **/
    cursor?: UserFavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavorites.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserFavorites.
     * 
    **/
    distinct?: Enumerable<UserFavoritesScalarFieldEnum>
  }

  /**
   * UserFavorites: findFirst
   */
  export interface UserFavoritesFindFirstArgs extends UserFavoritesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * UserFavorites findMany
   */
  export type UserFavoritesFindManyArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * Filter, which UserFavorites to fetch.
     * 
    **/
    where?: UserFavoritesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserFavorites to fetch.
     * 
    **/
    orderBy?: Enumerable<UserFavoritesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserFavorites.
     * 
    **/
    cursor?: UserFavoritesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserFavorites from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserFavorites.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserFavoritesScalarFieldEnum>
  }


  /**
   * UserFavorites create
   */
  export type UserFavoritesCreateArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * The data needed to create a UserFavorites.
     * 
    **/
    data: XOR<UserFavoritesCreateInput, UserFavoritesUncheckedCreateInput>
  }


  /**
   * UserFavorites createMany
   */
  export type UserFavoritesCreateManyArgs = {
    /**
     * The data used to create many UserFavorites.
     * 
    **/
    data: Enumerable<UserFavoritesCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * UserFavorites update
   */
  export type UserFavoritesUpdateArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * The data needed to update a UserFavorites.
     * 
    **/
    data: XOR<UserFavoritesUpdateInput, UserFavoritesUncheckedUpdateInput>
    /**
     * Choose, which UserFavorites to update.
     * 
    **/
    where: UserFavoritesWhereUniqueInput
  }


  /**
   * UserFavorites updateMany
   */
  export type UserFavoritesUpdateManyArgs = {
    /**
     * The data used to update UserFavorites.
     * 
    **/
    data: XOR<UserFavoritesUpdateManyMutationInput, UserFavoritesUncheckedUpdateManyInput>
    /**
     * Filter which UserFavorites to update
     * 
    **/
    where?: UserFavoritesWhereInput
  }


  /**
   * UserFavorites upsert
   */
  export type UserFavoritesUpsertArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * The filter to search for the UserFavorites to update in case it exists.
     * 
    **/
    where: UserFavoritesWhereUniqueInput
    /**
     * In case the UserFavorites found by the `where` argument doesn't exist, create a new UserFavorites with this data.
     * 
    **/
    create: XOR<UserFavoritesCreateInput, UserFavoritesUncheckedCreateInput>
    /**
     * In case the UserFavorites was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserFavoritesUpdateInput, UserFavoritesUncheckedUpdateInput>
  }


  /**
   * UserFavorites delete
   */
  export type UserFavoritesDeleteArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
    /**
     * Filter which UserFavorites to delete.
     * 
    **/
    where: UserFavoritesWhereUniqueInput
  }


  /**
   * UserFavorites deleteMany
   */
  export type UserFavoritesDeleteManyArgs = {
    /**
     * Filter which UserFavorites to delete
     * 
    **/
    where?: UserFavoritesWhereInput
  }


  /**
   * UserFavorites: findUniqueOrThrow
   */
  export type UserFavoritesFindUniqueOrThrowArgs = UserFavoritesFindUniqueArgsBase
      

  /**
   * UserFavorites: findFirstOrThrow
   */
  export type UserFavoritesFindFirstOrThrowArgs = UserFavoritesFindFirstArgsBase
      

  /**
   * UserFavorites without action
   */
  export type UserFavoritesArgs = {
    /**
     * Select specific fields to fetch from the UserFavorites
     * 
    **/
    select?: UserFavoritesSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserFavoritesInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AccessoreisScalarFieldEnum: {
    id: 'id',
    phoneId: 'phoneId',
    earphone: 'earphone',
    charger: 'charger',
    chargerPower: 'chargerPower',
    pen: 'pen',
    phoneCase: 'phoneCase',
    screenProtector: 'screenProtector'
  };

  export type AccessoreisScalarFieldEnum = (typeof AccessoreisScalarFieldEnum)[keyof typeof AccessoreisScalarFieldEnum]


  export const CameraFeaturesScalarFieldEnum: {
    id: 'id',
    phoneId: 'phoneId',
    megaPixels: 'megaPixels',
    apertureSize: 'apertureSize',
    stabilization: 'stabilization',
    macro: 'macro',
    panorama: 'panorama',
    ultrawide: 'ultrawide'
  };

  export type CameraFeaturesScalarFieldEnum = (typeof CameraFeaturesScalarFieldEnum)[keyof typeof CameraFeaturesScalarFieldEnum]


  export const CellphoneScalarFieldEnum: {
    id: 'id',
    name: 'name',
    price: 'price',
    processor: 'processor',
    RAM: 'RAM',
    storage: 'storage',
    mAh: 'mAh',
    have5G: 'have5G',
    displayType: 'displayType',
    displaySize: 'displaySize',
    displayResolution: 'displayResolution',
    displayFPS: 'displayFPS',
    OS: 'OS',
    brand: 'brand'
  };

  export type CellphoneScalarFieldEnum = (typeof CellphoneScalarFieldEnum)[keyof typeof CellphoneScalarFieldEnum]


  export const CommentariesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    phoneId: 'phoneId',
    commentary: 'commentary'
  };

  export type CommentariesScalarFieldEnum = (typeof CommentariesScalarFieldEnum)[keyof typeof CommentariesScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserFavoritesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    phoneId: 'phoneId'
  };

  export type UserFavoritesScalarFieldEnum = (typeof UserFavoritesScalarFieldEnum)[keyof typeof UserFavoritesScalarFieldEnum]


  export const UserRatingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    phoneId: 'phoneId',
    rate: 'rate'
  };

  export type UserRatingScalarFieldEnum = (typeof UserRatingScalarFieldEnum)[keyof typeof UserRatingScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VideoFeaturesScalarFieldEnum: {
    id: 'id',
    phoneId: 'phoneId',
    maxRsolution: 'maxRsolution',
    maxFPS: 'maxFPS',
    slowmotion: 'slowmotion',
    stereoSoundRec: 'stereoSoundRec'
  };

  export type VideoFeaturesScalarFieldEnum = (typeof VideoFeaturesScalarFieldEnum)[keyof typeof VideoFeaturesScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    userRating?: UserRatingListRelationFilter
    commentaries?: CommentariesListRelationFilter
    userFavorites?: UserFavoritesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userRating?: UserRatingOrderByRelationAggregateInput
    commentaries?: CommentariesOrderByRelationAggregateInput
    userFavorites?: UserFavoritesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    firstName?: StringWithAggregatesFilter | string
    lastName?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type CellphoneWhereInput = {
    AND?: Enumerable<CellphoneWhereInput>
    OR?: Enumerable<CellphoneWhereInput>
    NOT?: Enumerable<CellphoneWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    price?: FloatNullableFilter | number | null
    processor?: StringFilter | string
    RAM?: IntFilter | number
    storage?: IntFilter | number
    mAh?: IntFilter | number
    have5G?: BoolFilter | boolean
    displayType?: StringFilter | string
    displaySize?: FloatFilter | number
    displayResolution?: StringFilter | string
    displayFPS?: IntFilter | number
    OS?: StringFilter | string
    brand?: StringFilter | string
    cameraFeatures?: CameraFeaturesListRelationFilter
    videoFeatures?: VideoFeaturesListRelationFilter
    accessories?: AccessoreisListRelationFilter
    userRating?: UserRatingListRelationFilter
    commentaries?: CommentariesListRelationFilter
    userFavorites?: UserFavoritesListRelationFilter
  }

  export type CellphoneOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    processor?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    have5G?: SortOrder
    displayType?: SortOrder
    displaySize?: SortOrder
    displayResolution?: SortOrder
    displayFPS?: SortOrder
    OS?: SortOrder
    brand?: SortOrder
    cameraFeatures?: CameraFeaturesOrderByRelationAggregateInput
    videoFeatures?: VideoFeaturesOrderByRelationAggregateInput
    accessories?: AccessoreisOrderByRelationAggregateInput
    userRating?: UserRatingOrderByRelationAggregateInput
    commentaries?: CommentariesOrderByRelationAggregateInput
    userFavorites?: UserFavoritesOrderByRelationAggregateInput
  }

  export type CellphoneWhereUniqueInput = {
    id?: number
    name?: string
  }

  export type CellphoneOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    processor?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    have5G?: SortOrder
    displayType?: SortOrder
    displaySize?: SortOrder
    displayResolution?: SortOrder
    displayFPS?: SortOrder
    OS?: SortOrder
    brand?: SortOrder
    _count?: CellphoneCountOrderByAggregateInput
    _avg?: CellphoneAvgOrderByAggregateInput
    _max?: CellphoneMaxOrderByAggregateInput
    _min?: CellphoneMinOrderByAggregateInput
    _sum?: CellphoneSumOrderByAggregateInput
  }

  export type CellphoneScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CellphoneScalarWhereWithAggregatesInput>
    OR?: Enumerable<CellphoneScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CellphoneScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    price?: FloatNullableWithAggregatesFilter | number | null
    processor?: StringWithAggregatesFilter | string
    RAM?: IntWithAggregatesFilter | number
    storage?: IntWithAggregatesFilter | number
    mAh?: IntWithAggregatesFilter | number
    have5G?: BoolWithAggregatesFilter | boolean
    displayType?: StringWithAggregatesFilter | string
    displaySize?: FloatWithAggregatesFilter | number
    displayResolution?: StringWithAggregatesFilter | string
    displayFPS?: IntWithAggregatesFilter | number
    OS?: StringWithAggregatesFilter | string
    brand?: StringWithAggregatesFilter | string
  }

  export type CameraFeaturesWhereInput = {
    AND?: Enumerable<CameraFeaturesWhereInput>
    OR?: Enumerable<CameraFeaturesWhereInput>
    NOT?: Enumerable<CameraFeaturesWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
    megaPixels?: IntFilter | number
    apertureSize?: FloatFilter | number
    stabilization?: StringFilter | string
    macro?: BoolFilter | boolean
    panorama?: BoolFilter | boolean
    ultrawide?: BoolFilter | boolean
  }

  export type CameraFeaturesOrderByWithRelationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
    megaPixels?: SortOrder
    apertureSize?: SortOrder
    stabilization?: SortOrder
    macro?: SortOrder
    panorama?: SortOrder
    ultrawide?: SortOrder
  }

  export type CameraFeaturesWhereUniqueInput = {
    id?: number
  }

  export type CameraFeaturesOrderByWithAggregationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
    stabilization?: SortOrder
    macro?: SortOrder
    panorama?: SortOrder
    ultrawide?: SortOrder
    _count?: CameraFeaturesCountOrderByAggregateInput
    _avg?: CameraFeaturesAvgOrderByAggregateInput
    _max?: CameraFeaturesMaxOrderByAggregateInput
    _min?: CameraFeaturesMinOrderByAggregateInput
    _sum?: CameraFeaturesSumOrderByAggregateInput
  }

  export type CameraFeaturesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CameraFeaturesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CameraFeaturesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CameraFeaturesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
    megaPixels?: IntWithAggregatesFilter | number
    apertureSize?: FloatWithAggregatesFilter | number
    stabilization?: StringWithAggregatesFilter | string
    macro?: BoolWithAggregatesFilter | boolean
    panorama?: BoolWithAggregatesFilter | boolean
    ultrawide?: BoolWithAggregatesFilter | boolean
  }

  export type VideoFeaturesWhereInput = {
    AND?: Enumerable<VideoFeaturesWhereInput>
    OR?: Enumerable<VideoFeaturesWhereInput>
    NOT?: Enumerable<VideoFeaturesWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
    maxRsolution?: StringFilter | string
    maxFPS?: IntFilter | number
    slowmotion?: BoolFilter | boolean
    stereoSoundRec?: BoolFilter | boolean
  }

  export type VideoFeaturesOrderByWithRelationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
    maxRsolution?: SortOrder
    maxFPS?: SortOrder
    slowmotion?: SortOrder
    stereoSoundRec?: SortOrder
  }

  export type VideoFeaturesWhereUniqueInput = {
    id?: number
  }

  export type VideoFeaturesOrderByWithAggregationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxRsolution?: SortOrder
    maxFPS?: SortOrder
    slowmotion?: SortOrder
    stereoSoundRec?: SortOrder
    _count?: VideoFeaturesCountOrderByAggregateInput
    _avg?: VideoFeaturesAvgOrderByAggregateInput
    _max?: VideoFeaturesMaxOrderByAggregateInput
    _min?: VideoFeaturesMinOrderByAggregateInput
    _sum?: VideoFeaturesSumOrderByAggregateInput
  }

  export type VideoFeaturesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VideoFeaturesScalarWhereWithAggregatesInput>
    OR?: Enumerable<VideoFeaturesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VideoFeaturesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
    maxRsolution?: StringWithAggregatesFilter | string
    maxFPS?: IntWithAggregatesFilter | number
    slowmotion?: BoolWithAggregatesFilter | boolean
    stereoSoundRec?: BoolWithAggregatesFilter | boolean
  }

  export type AccessoreisWhereInput = {
    AND?: Enumerable<AccessoreisWhereInput>
    OR?: Enumerable<AccessoreisWhereInput>
    NOT?: Enumerable<AccessoreisWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
    earphone?: BoolFilter | boolean
    charger?: BoolFilter | boolean
    chargerPower?: IntNullableFilter | number | null
    pen?: BoolFilter | boolean
    phoneCase?: BoolFilter | boolean
    screenProtector?: BoolFilter | boolean
  }

  export type AccessoreisOrderByWithRelationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
    earphone?: SortOrder
    charger?: SortOrder
    chargerPower?: SortOrder
    pen?: SortOrder
    phoneCase?: SortOrder
    screenProtector?: SortOrder
  }

  export type AccessoreisWhereUniqueInput = {
    id?: number
  }

  export type AccessoreisOrderByWithAggregationInput = {
    id?: SortOrder
    phoneId?: SortOrder
    earphone?: SortOrder
    charger?: SortOrder
    chargerPower?: SortOrder
    pen?: SortOrder
    phoneCase?: SortOrder
    screenProtector?: SortOrder
    _count?: AccessoreisCountOrderByAggregateInput
    _avg?: AccessoreisAvgOrderByAggregateInput
    _max?: AccessoreisMaxOrderByAggregateInput
    _min?: AccessoreisMinOrderByAggregateInput
    _sum?: AccessoreisSumOrderByAggregateInput
  }

  export type AccessoreisScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AccessoreisScalarWhereWithAggregatesInput>
    OR?: Enumerable<AccessoreisScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AccessoreisScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
    earphone?: BoolWithAggregatesFilter | boolean
    charger?: BoolWithAggregatesFilter | boolean
    chargerPower?: IntNullableWithAggregatesFilter | number | null
    pen?: BoolWithAggregatesFilter | boolean
    phoneCase?: BoolWithAggregatesFilter | boolean
    screenProtector?: BoolWithAggregatesFilter | boolean
  }

  export type UserRatingWhereInput = {
    AND?: Enumerable<UserRatingWhereInput>
    OR?: Enumerable<UserRatingWhereInput>
    NOT?: Enumerable<UserRatingWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    users?: XOR<UserRelationFilter, UserWhereInput>
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
    rate?: IntFilter | number
  }

  export type UserRatingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    users?: UserOrderByWithRelationInput
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
    rate?: SortOrder
  }

  export type UserRatingWhereUniqueInput = {
    id?: number
  }

  export type UserRatingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
    _count?: UserRatingCountOrderByAggregateInput
    _avg?: UserRatingAvgOrderByAggregateInput
    _max?: UserRatingMaxOrderByAggregateInput
    _min?: UserRatingMinOrderByAggregateInput
    _sum?: UserRatingSumOrderByAggregateInput
  }

  export type UserRatingScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserRatingScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserRatingScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserRatingScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
    rate?: IntWithAggregatesFilter | number
  }

  export type CommentariesWhereInput = {
    AND?: Enumerable<CommentariesWhereInput>
    OR?: Enumerable<CommentariesWhereInput>
    NOT?: Enumerable<CommentariesWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    users?: XOR<UserRelationFilter, UserWhereInput>
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
    commentary?: StringFilter | string
  }

  export type CommentariesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    users?: UserOrderByWithRelationInput
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
    commentary?: SortOrder
  }

  export type CommentariesWhereUniqueInput = {
    id?: number
  }

  export type CommentariesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    commentary?: SortOrder
    _count?: CommentariesCountOrderByAggregateInput
    _avg?: CommentariesAvgOrderByAggregateInput
    _max?: CommentariesMaxOrderByAggregateInput
    _min?: CommentariesMinOrderByAggregateInput
    _sum?: CommentariesSumOrderByAggregateInput
  }

  export type CommentariesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CommentariesScalarWhereWithAggregatesInput>
    OR?: Enumerable<CommentariesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CommentariesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
    commentary?: StringWithAggregatesFilter | string
  }

  export type UserFavoritesWhereInput = {
    AND?: Enumerable<UserFavoritesWhereInput>
    OR?: Enumerable<UserFavoritesWhereInput>
    NOT?: Enumerable<UserFavoritesWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    users?: XOR<UserRelationFilter, UserWhereInput>
    phoneId?: IntFilter | number
    cellphones?: XOR<CellphoneRelationFilter, CellphoneWhereInput>
  }

  export type UserFavoritesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    users?: UserOrderByWithRelationInput
    phoneId?: SortOrder
    cellphones?: CellphoneOrderByWithRelationInput
  }

  export type UserFavoritesWhereUniqueInput = {
    id?: number
  }

  export type UserFavoritesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    _count?: UserFavoritesCountOrderByAggregateInput
    _avg?: UserFavoritesAvgOrderByAggregateInput
    _max?: UserFavoritesMaxOrderByAggregateInput
    _min?: UserFavoritesMinOrderByAggregateInput
    _sum?: UserFavoritesSumOrderByAggregateInput
  }

  export type UserFavoritesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserFavoritesScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserFavoritesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserFavoritesScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    phoneId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingCreateNestedManyWithoutUsersInput
    commentaries?: CommentariesCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingUncheckedCreateNestedManyWithoutUsersInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUpdateManyWithoutUsersNestedInput
    commentaries?: CommentariesUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUncheckedUpdateManyWithoutUsersNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CellphoneCreateInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneCreateManyInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
  }

  export type CellphoneUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
  }

  export type CellphoneUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
  }

  export type CameraFeaturesCreateInput = {
    cellphones: CellphoneCreateNestedOneWithoutCameraFeaturesInput
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type CameraFeaturesUncheckedCreateInput = {
    id?: number
    phoneId: number
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type CameraFeaturesUpdateInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutCameraFeaturesNestedInput
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CameraFeaturesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CameraFeaturesCreateManyInput = {
    id?: number
    phoneId: number
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type CameraFeaturesUpdateManyMutationInput = {
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CameraFeaturesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesCreateInput = {
    cellphones: CellphoneCreateNestedOneWithoutVideoFeaturesInput
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type VideoFeaturesUncheckedCreateInput = {
    id?: number
    phoneId: number
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type VideoFeaturesUpdateInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutVideoFeaturesNestedInput
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesCreateManyInput = {
    id?: number
    phoneId: number
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type VideoFeaturesUpdateManyMutationInput = {
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisCreateInput = {
    cellphones: CellphoneCreateNestedOneWithoutAccessoriesInput
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type AccessoreisUncheckedCreateInput = {
    id?: number
    phoneId: number
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type AccessoreisUpdateInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutAccessoriesNestedInput
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisCreateManyInput = {
    id?: number
    phoneId: number
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type AccessoreisUpdateManyMutationInput = {
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRatingCreateInput = {
    users: UserCreateNestedOneWithoutUserRatingInput
    cellphones: CellphoneCreateNestedOneWithoutUserRatingInput
    rate: number
  }

  export type UserRatingUncheckedCreateInput = {
    id?: number
    userId: number
    phoneId: number
    rate: number
  }

  export type UserRatingUpdateInput = {
    users?: UserUpdateOneRequiredWithoutUserRatingNestedInput
    cellphones?: CellphoneUpdateOneRequiredWithoutUserRatingNestedInput
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingCreateManyInput = {
    id?: number
    userId: number
    phoneId: number
    rate: number
  }

  export type UserRatingUpdateManyMutationInput = {
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type CommentariesCreateInput = {
    users: UserCreateNestedOneWithoutCommentariesInput
    cellphones: CellphoneCreateNestedOneWithoutCommentariesInput
    commentary: string
  }

  export type CommentariesUncheckedCreateInput = {
    id?: number
    userId: number
    phoneId: number
    commentary: string
  }

  export type CommentariesUpdateInput = {
    users?: UserUpdateOneRequiredWithoutCommentariesNestedInput
    cellphones?: CellphoneUpdateOneRequiredWithoutCommentariesNestedInput
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesCreateManyInput = {
    id?: number
    userId: number
    phoneId: number
    commentary: string
  }

  export type CommentariesUpdateManyMutationInput = {
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type UserFavoritesCreateInput = {
    users: UserCreateNestedOneWithoutUserFavoritesInput
    cellphones: CellphoneCreateNestedOneWithoutUserFavoritesInput
  }

  export type UserFavoritesUncheckedCreateInput = {
    id?: number
    userId: number
    phoneId: number
  }

  export type UserFavoritesUpdateInput = {
    users?: UserUpdateOneRequiredWithoutUserFavoritesNestedInput
    cellphones?: CellphoneUpdateOneRequiredWithoutUserFavoritesNestedInput
  }

  export type UserFavoritesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritesCreateManyInput = {
    id?: number
    userId: number
    phoneId: number
  }

  export type UserFavoritesUpdateManyMutationInput = {

  }

  export type UserFavoritesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type UserRatingListRelationFilter = {
    every?: UserRatingWhereInput
    some?: UserRatingWhereInput
    none?: UserRatingWhereInput
  }

  export type CommentariesListRelationFilter = {
    every?: CommentariesWhereInput
    some?: CommentariesWhereInput
    none?: CommentariesWhereInput
  }

  export type UserFavoritesListRelationFilter = {
    every?: UserFavoritesWhereInput
    some?: UserFavoritesWhereInput
    none?: UserFavoritesWhereInput
  }

  export type UserRatingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentariesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserFavoritesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type CameraFeaturesListRelationFilter = {
    every?: CameraFeaturesWhereInput
    some?: CameraFeaturesWhereInput
    none?: CameraFeaturesWhereInput
  }

  export type VideoFeaturesListRelationFilter = {
    every?: VideoFeaturesWhereInput
    some?: VideoFeaturesWhereInput
    none?: VideoFeaturesWhereInput
  }

  export type AccessoreisListRelationFilter = {
    every?: AccessoreisWhereInput
    some?: AccessoreisWhereInput
    none?: AccessoreisWhereInput
  }

  export type CameraFeaturesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoFeaturesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccessoreisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CellphoneCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    processor?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    have5G?: SortOrder
    displayType?: SortOrder
    displaySize?: SortOrder
    displayResolution?: SortOrder
    displayFPS?: SortOrder
    OS?: SortOrder
    brand?: SortOrder
  }

  export type CellphoneAvgOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    displaySize?: SortOrder
    displayFPS?: SortOrder
  }

  export type CellphoneMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    processor?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    have5G?: SortOrder
    displayType?: SortOrder
    displaySize?: SortOrder
    displayResolution?: SortOrder
    displayFPS?: SortOrder
    OS?: SortOrder
    brand?: SortOrder
  }

  export type CellphoneMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    price?: SortOrder
    processor?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    have5G?: SortOrder
    displayType?: SortOrder
    displaySize?: SortOrder
    displayResolution?: SortOrder
    displayFPS?: SortOrder
    OS?: SortOrder
    brand?: SortOrder
  }

  export type CellphoneSumOrderByAggregateInput = {
    id?: SortOrder
    price?: SortOrder
    RAM?: SortOrder
    storage?: SortOrder
    mAh?: SortOrder
    displaySize?: SortOrder
    displayFPS?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type CellphoneRelationFilter = {
    is?: CellphoneWhereInput
    isNot?: CellphoneWhereInput
  }

  export type CameraFeaturesCountOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
    stabilization?: SortOrder
    macro?: SortOrder
    panorama?: SortOrder
    ultrawide?: SortOrder
  }

  export type CameraFeaturesAvgOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
  }

  export type CameraFeaturesMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
    stabilization?: SortOrder
    macro?: SortOrder
    panorama?: SortOrder
    ultrawide?: SortOrder
  }

  export type CameraFeaturesMinOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
    stabilization?: SortOrder
    macro?: SortOrder
    panorama?: SortOrder
    ultrawide?: SortOrder
  }

  export type CameraFeaturesSumOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    megaPixels?: SortOrder
    apertureSize?: SortOrder
  }

  export type VideoFeaturesCountOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxRsolution?: SortOrder
    maxFPS?: SortOrder
    slowmotion?: SortOrder
    stereoSoundRec?: SortOrder
  }

  export type VideoFeaturesAvgOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxFPS?: SortOrder
  }

  export type VideoFeaturesMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxRsolution?: SortOrder
    maxFPS?: SortOrder
    slowmotion?: SortOrder
    stereoSoundRec?: SortOrder
  }

  export type VideoFeaturesMinOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxRsolution?: SortOrder
    maxFPS?: SortOrder
    slowmotion?: SortOrder
    stereoSoundRec?: SortOrder
  }

  export type VideoFeaturesSumOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    maxFPS?: SortOrder
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type AccessoreisCountOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    earphone?: SortOrder
    charger?: SortOrder
    chargerPower?: SortOrder
    pen?: SortOrder
    phoneCase?: SortOrder
    screenProtector?: SortOrder
  }

  export type AccessoreisAvgOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    chargerPower?: SortOrder
  }

  export type AccessoreisMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    earphone?: SortOrder
    charger?: SortOrder
    chargerPower?: SortOrder
    pen?: SortOrder
    phoneCase?: SortOrder
    screenProtector?: SortOrder
  }

  export type AccessoreisMinOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    earphone?: SortOrder
    charger?: SortOrder
    chargerPower?: SortOrder
    pen?: SortOrder
    phoneCase?: SortOrder
    screenProtector?: SortOrder
  }

  export type AccessoreisSumOrderByAggregateInput = {
    id?: SortOrder
    phoneId?: SortOrder
    chargerPower?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserRatingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
  }

  export type UserRatingAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
  }

  export type UserRatingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
  }

  export type UserRatingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
  }

  export type UserRatingSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    rate?: SortOrder
  }

  export type CommentariesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    commentary?: SortOrder
  }

  export type CommentariesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type CommentariesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    commentary?: SortOrder
  }

  export type CommentariesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
    commentary?: SortOrder
  }

  export type CommentariesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserFavoritesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserFavoritesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserFavoritesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserFavoritesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserFavoritesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    phoneId?: SortOrder
  }

  export type UserRatingCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutUsersInput>, Enumerable<UserRatingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutUsersInput>
    createMany?: UserRatingCreateManyUsersInputEnvelope
    connect?: Enumerable<UserRatingWhereUniqueInput>
  }

  export type CommentariesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutUsersInput>, Enumerable<CommentariesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutUsersInput>
    createMany?: CommentariesCreateManyUsersInputEnvelope
    connect?: Enumerable<CommentariesWhereUniqueInput>
  }

  export type UserFavoritesCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutUsersInput>, Enumerable<UserFavoritesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutUsersInput>
    createMany?: UserFavoritesCreateManyUsersInputEnvelope
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
  }

  export type UserRatingUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutUsersInput>, Enumerable<UserRatingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutUsersInput>
    createMany?: UserRatingCreateManyUsersInputEnvelope
    connect?: Enumerable<UserRatingWhereUniqueInput>
  }

  export type CommentariesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutUsersInput>, Enumerable<CommentariesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutUsersInput>
    createMany?: CommentariesCreateManyUsersInputEnvelope
    connect?: Enumerable<CommentariesWhereUniqueInput>
  }

  export type UserFavoritesUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutUsersInput>, Enumerable<UserFavoritesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutUsersInput>
    createMany?: UserFavoritesCreateManyUsersInputEnvelope
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserRatingUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutUsersInput>, Enumerable<UserRatingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserRatingUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserRatingCreateManyUsersInputEnvelope
    set?: Enumerable<UserRatingWhereUniqueInput>
    disconnect?: Enumerable<UserRatingWhereUniqueInput>
    delete?: Enumerable<UserRatingWhereUniqueInput>
    connect?: Enumerable<UserRatingWhereUniqueInput>
    update?: Enumerable<UserRatingUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserRatingUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserRatingScalarWhereInput>
  }

  export type CommentariesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutUsersInput>, Enumerable<CommentariesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<CommentariesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: CommentariesCreateManyUsersInputEnvelope
    set?: Enumerable<CommentariesWhereUniqueInput>
    disconnect?: Enumerable<CommentariesWhereUniqueInput>
    delete?: Enumerable<CommentariesWhereUniqueInput>
    connect?: Enumerable<CommentariesWhereUniqueInput>
    update?: Enumerable<CommentariesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<CommentariesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<CommentariesScalarWhereInput>
  }

  export type UserFavoritesUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutUsersInput>, Enumerable<UserFavoritesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserFavoritesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserFavoritesCreateManyUsersInputEnvelope
    set?: Enumerable<UserFavoritesWhereUniqueInput>
    disconnect?: Enumerable<UserFavoritesWhereUniqueInput>
    delete?: Enumerable<UserFavoritesWhereUniqueInput>
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
    update?: Enumerable<UserFavoritesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserFavoritesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserFavoritesScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserRatingUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutUsersInput>, Enumerable<UserRatingUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserRatingUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserRatingCreateManyUsersInputEnvelope
    set?: Enumerable<UserRatingWhereUniqueInput>
    disconnect?: Enumerable<UserRatingWhereUniqueInput>
    delete?: Enumerable<UserRatingWhereUniqueInput>
    connect?: Enumerable<UserRatingWhereUniqueInput>
    update?: Enumerable<UserRatingUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserRatingUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserRatingScalarWhereInput>
  }

  export type CommentariesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutUsersInput>, Enumerable<CommentariesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<CommentariesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: CommentariesCreateManyUsersInputEnvelope
    set?: Enumerable<CommentariesWhereUniqueInput>
    disconnect?: Enumerable<CommentariesWhereUniqueInput>
    delete?: Enumerable<CommentariesWhereUniqueInput>
    connect?: Enumerable<CommentariesWhereUniqueInput>
    update?: Enumerable<CommentariesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<CommentariesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<CommentariesScalarWhereInput>
  }

  export type UserFavoritesUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutUsersInput>, Enumerable<UserFavoritesUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<UserFavoritesUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: UserFavoritesCreateManyUsersInputEnvelope
    set?: Enumerable<UserFavoritesWhereUniqueInput>
    disconnect?: Enumerable<UserFavoritesWhereUniqueInput>
    delete?: Enumerable<UserFavoritesWhereUniqueInput>
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
    update?: Enumerable<UserFavoritesUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<UserFavoritesUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<UserFavoritesScalarWhereInput>
  }

  export type CameraFeaturesCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<CameraFeaturesCreateWithoutCellphonesInput>, Enumerable<CameraFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CameraFeaturesCreateOrConnectWithoutCellphonesInput>
    createMany?: CameraFeaturesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<CameraFeaturesWhereUniqueInput>
  }

  export type VideoFeaturesCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<VideoFeaturesCreateWithoutCellphonesInput>, Enumerable<VideoFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<VideoFeaturesCreateOrConnectWithoutCellphonesInput>
    createMany?: VideoFeaturesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<VideoFeaturesWhereUniqueInput>
  }

  export type AccessoreisCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<AccessoreisCreateWithoutCellphonesInput>, Enumerable<AccessoreisUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<AccessoreisCreateOrConnectWithoutCellphonesInput>
    createMany?: AccessoreisCreateManyCellphonesInputEnvelope
    connect?: Enumerable<AccessoreisWhereUniqueInput>
  }

  export type UserRatingCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutCellphonesInput>, Enumerable<UserRatingUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutCellphonesInput>
    createMany?: UserRatingCreateManyCellphonesInputEnvelope
    connect?: Enumerable<UserRatingWhereUniqueInput>
  }

  export type CommentariesCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutCellphonesInput>, Enumerable<CommentariesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutCellphonesInput>
    createMany?: CommentariesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<CommentariesWhereUniqueInput>
  }

  export type UserFavoritesCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutCellphonesInput>, Enumerable<UserFavoritesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutCellphonesInput>
    createMany?: UserFavoritesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
  }

  export type CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<CameraFeaturesCreateWithoutCellphonesInput>, Enumerable<CameraFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CameraFeaturesCreateOrConnectWithoutCellphonesInput>
    createMany?: CameraFeaturesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<CameraFeaturesWhereUniqueInput>
  }

  export type VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<VideoFeaturesCreateWithoutCellphonesInput>, Enumerable<VideoFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<VideoFeaturesCreateOrConnectWithoutCellphonesInput>
    createMany?: VideoFeaturesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<VideoFeaturesWhereUniqueInput>
  }

  export type AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<AccessoreisCreateWithoutCellphonesInput>, Enumerable<AccessoreisUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<AccessoreisCreateOrConnectWithoutCellphonesInput>
    createMany?: AccessoreisCreateManyCellphonesInputEnvelope
    connect?: Enumerable<AccessoreisWhereUniqueInput>
  }

  export type UserRatingUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutCellphonesInput>, Enumerable<UserRatingUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutCellphonesInput>
    createMany?: UserRatingCreateManyCellphonesInputEnvelope
    connect?: Enumerable<UserRatingWhereUniqueInput>
  }

  export type CommentariesUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutCellphonesInput>, Enumerable<CommentariesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutCellphonesInput>
    createMany?: CommentariesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<CommentariesWhereUniqueInput>
  }

  export type UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutCellphonesInput>, Enumerable<UserFavoritesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutCellphonesInput>
    createMany?: UserFavoritesCreateManyCellphonesInputEnvelope
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CameraFeaturesUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<CameraFeaturesCreateWithoutCellphonesInput>, Enumerable<CameraFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CameraFeaturesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<CameraFeaturesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: CameraFeaturesCreateManyCellphonesInputEnvelope
    set?: Enumerable<CameraFeaturesWhereUniqueInput>
    disconnect?: Enumerable<CameraFeaturesWhereUniqueInput>
    delete?: Enumerable<CameraFeaturesWhereUniqueInput>
    connect?: Enumerable<CameraFeaturesWhereUniqueInput>
    update?: Enumerable<CameraFeaturesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<CameraFeaturesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<CameraFeaturesScalarWhereInput>
  }

  export type VideoFeaturesUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<VideoFeaturesCreateWithoutCellphonesInput>, Enumerable<VideoFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<VideoFeaturesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<VideoFeaturesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: VideoFeaturesCreateManyCellphonesInputEnvelope
    set?: Enumerable<VideoFeaturesWhereUniqueInput>
    disconnect?: Enumerable<VideoFeaturesWhereUniqueInput>
    delete?: Enumerable<VideoFeaturesWhereUniqueInput>
    connect?: Enumerable<VideoFeaturesWhereUniqueInput>
    update?: Enumerable<VideoFeaturesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<VideoFeaturesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<VideoFeaturesScalarWhereInput>
  }

  export type AccessoreisUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<AccessoreisCreateWithoutCellphonesInput>, Enumerable<AccessoreisUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<AccessoreisCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<AccessoreisUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: AccessoreisCreateManyCellphonesInputEnvelope
    set?: Enumerable<AccessoreisWhereUniqueInput>
    disconnect?: Enumerable<AccessoreisWhereUniqueInput>
    delete?: Enumerable<AccessoreisWhereUniqueInput>
    connect?: Enumerable<AccessoreisWhereUniqueInput>
    update?: Enumerable<AccessoreisUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<AccessoreisUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<AccessoreisScalarWhereInput>
  }

  export type UserRatingUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutCellphonesInput>, Enumerable<UserRatingUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<UserRatingUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: UserRatingCreateManyCellphonesInputEnvelope
    set?: Enumerable<UserRatingWhereUniqueInput>
    disconnect?: Enumerable<UserRatingWhereUniqueInput>
    delete?: Enumerable<UserRatingWhereUniqueInput>
    connect?: Enumerable<UserRatingWhereUniqueInput>
    update?: Enumerable<UserRatingUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<UserRatingUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<UserRatingScalarWhereInput>
  }

  export type CommentariesUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutCellphonesInput>, Enumerable<CommentariesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<CommentariesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: CommentariesCreateManyCellphonesInputEnvelope
    set?: Enumerable<CommentariesWhereUniqueInput>
    disconnect?: Enumerable<CommentariesWhereUniqueInput>
    delete?: Enumerable<CommentariesWhereUniqueInput>
    connect?: Enumerable<CommentariesWhereUniqueInput>
    update?: Enumerable<CommentariesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<CommentariesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<CommentariesScalarWhereInput>
  }

  export type UserFavoritesUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutCellphonesInput>, Enumerable<UserFavoritesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<UserFavoritesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: UserFavoritesCreateManyCellphonesInputEnvelope
    set?: Enumerable<UserFavoritesWhereUniqueInput>
    disconnect?: Enumerable<UserFavoritesWhereUniqueInput>
    delete?: Enumerable<UserFavoritesWhereUniqueInput>
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
    update?: Enumerable<UserFavoritesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<UserFavoritesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<UserFavoritesScalarWhereInput>
  }

  export type CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<CameraFeaturesCreateWithoutCellphonesInput>, Enumerable<CameraFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CameraFeaturesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<CameraFeaturesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: CameraFeaturesCreateManyCellphonesInputEnvelope
    set?: Enumerable<CameraFeaturesWhereUniqueInput>
    disconnect?: Enumerable<CameraFeaturesWhereUniqueInput>
    delete?: Enumerable<CameraFeaturesWhereUniqueInput>
    connect?: Enumerable<CameraFeaturesWhereUniqueInput>
    update?: Enumerable<CameraFeaturesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<CameraFeaturesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<CameraFeaturesScalarWhereInput>
  }

  export type VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<VideoFeaturesCreateWithoutCellphonesInput>, Enumerable<VideoFeaturesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<VideoFeaturesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<VideoFeaturesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: VideoFeaturesCreateManyCellphonesInputEnvelope
    set?: Enumerable<VideoFeaturesWhereUniqueInput>
    disconnect?: Enumerable<VideoFeaturesWhereUniqueInput>
    delete?: Enumerable<VideoFeaturesWhereUniqueInput>
    connect?: Enumerable<VideoFeaturesWhereUniqueInput>
    update?: Enumerable<VideoFeaturesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<VideoFeaturesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<VideoFeaturesScalarWhereInput>
  }

  export type AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<AccessoreisCreateWithoutCellphonesInput>, Enumerable<AccessoreisUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<AccessoreisCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<AccessoreisUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: AccessoreisCreateManyCellphonesInputEnvelope
    set?: Enumerable<AccessoreisWhereUniqueInput>
    disconnect?: Enumerable<AccessoreisWhereUniqueInput>
    delete?: Enumerable<AccessoreisWhereUniqueInput>
    connect?: Enumerable<AccessoreisWhereUniqueInput>
    update?: Enumerable<AccessoreisUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<AccessoreisUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<AccessoreisScalarWhereInput>
  }

  export type UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<UserRatingCreateWithoutCellphonesInput>, Enumerable<UserRatingUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserRatingCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<UserRatingUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: UserRatingCreateManyCellphonesInputEnvelope
    set?: Enumerable<UserRatingWhereUniqueInput>
    disconnect?: Enumerable<UserRatingWhereUniqueInput>
    delete?: Enumerable<UserRatingWhereUniqueInput>
    connect?: Enumerable<UserRatingWhereUniqueInput>
    update?: Enumerable<UserRatingUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<UserRatingUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<UserRatingScalarWhereInput>
  }

  export type CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<CommentariesCreateWithoutCellphonesInput>, Enumerable<CommentariesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<CommentariesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<CommentariesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: CommentariesCreateManyCellphonesInputEnvelope
    set?: Enumerable<CommentariesWhereUniqueInput>
    disconnect?: Enumerable<CommentariesWhereUniqueInput>
    delete?: Enumerable<CommentariesWhereUniqueInput>
    connect?: Enumerable<CommentariesWhereUniqueInput>
    update?: Enumerable<CommentariesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<CommentariesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<CommentariesScalarWhereInput>
  }

  export type UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput = {
    create?: XOR<Enumerable<UserFavoritesCreateWithoutCellphonesInput>, Enumerable<UserFavoritesUncheckedCreateWithoutCellphonesInput>>
    connectOrCreate?: Enumerable<UserFavoritesCreateOrConnectWithoutCellphonesInput>
    upsert?: Enumerable<UserFavoritesUpsertWithWhereUniqueWithoutCellphonesInput>
    createMany?: UserFavoritesCreateManyCellphonesInputEnvelope
    set?: Enumerable<UserFavoritesWhereUniqueInput>
    disconnect?: Enumerable<UserFavoritesWhereUniqueInput>
    delete?: Enumerable<UserFavoritesWhereUniqueInput>
    connect?: Enumerable<UserFavoritesWhereUniqueInput>
    update?: Enumerable<UserFavoritesUpdateWithWhereUniqueWithoutCellphonesInput>
    updateMany?: Enumerable<UserFavoritesUpdateManyWithWhereWithoutCellphonesInput>
    deleteMany?: Enumerable<UserFavoritesScalarWhereInput>
  }

  export type CellphoneCreateNestedOneWithoutCameraFeaturesInput = {
    create?: XOR<CellphoneCreateWithoutCameraFeaturesInput, CellphoneUncheckedCreateWithoutCameraFeaturesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutCameraFeaturesInput
    connect?: CellphoneWhereUniqueInput
  }

  export type CellphoneUpdateOneRequiredWithoutCameraFeaturesNestedInput = {
    create?: XOR<CellphoneCreateWithoutCameraFeaturesInput, CellphoneUncheckedCreateWithoutCameraFeaturesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutCameraFeaturesInput
    upsert?: CellphoneUpsertWithoutCameraFeaturesInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutCameraFeaturesInput, CellphoneUncheckedUpdateWithoutCameraFeaturesInput>
  }

  export type CellphoneCreateNestedOneWithoutVideoFeaturesInput = {
    create?: XOR<CellphoneCreateWithoutVideoFeaturesInput, CellphoneUncheckedCreateWithoutVideoFeaturesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutVideoFeaturesInput
    connect?: CellphoneWhereUniqueInput
  }

  export type CellphoneUpdateOneRequiredWithoutVideoFeaturesNestedInput = {
    create?: XOR<CellphoneCreateWithoutVideoFeaturesInput, CellphoneUncheckedCreateWithoutVideoFeaturesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutVideoFeaturesInput
    upsert?: CellphoneUpsertWithoutVideoFeaturesInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutVideoFeaturesInput, CellphoneUncheckedUpdateWithoutVideoFeaturesInput>
  }

  export type CellphoneCreateNestedOneWithoutAccessoriesInput = {
    create?: XOR<CellphoneCreateWithoutAccessoriesInput, CellphoneUncheckedCreateWithoutAccessoriesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutAccessoriesInput
    connect?: CellphoneWhereUniqueInput
  }

  export type CellphoneUpdateOneRequiredWithoutAccessoriesNestedInput = {
    create?: XOR<CellphoneCreateWithoutAccessoriesInput, CellphoneUncheckedCreateWithoutAccessoriesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutAccessoriesInput
    upsert?: CellphoneUpsertWithoutAccessoriesInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutAccessoriesInput, CellphoneUncheckedUpdateWithoutAccessoriesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutUserRatingInput = {
    create?: XOR<UserCreateWithoutUserRatingInput, UserUncheckedCreateWithoutUserRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRatingInput
    connect?: UserWhereUniqueInput
  }

  export type CellphoneCreateNestedOneWithoutUserRatingInput = {
    create?: XOR<CellphoneCreateWithoutUserRatingInput, CellphoneUncheckedCreateWithoutUserRatingInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutUserRatingInput
    connect?: CellphoneWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserRatingNestedInput = {
    create?: XOR<UserCreateWithoutUserRatingInput, UserUncheckedCreateWithoutUserRatingInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserRatingInput
    upsert?: UserUpsertWithoutUserRatingInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserRatingInput, UserUncheckedUpdateWithoutUserRatingInput>
  }

  export type CellphoneUpdateOneRequiredWithoutUserRatingNestedInput = {
    create?: XOR<CellphoneCreateWithoutUserRatingInput, CellphoneUncheckedCreateWithoutUserRatingInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutUserRatingInput
    upsert?: CellphoneUpsertWithoutUserRatingInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutUserRatingInput, CellphoneUncheckedUpdateWithoutUserRatingInput>
  }

  export type UserCreateNestedOneWithoutCommentariesInput = {
    create?: XOR<UserCreateWithoutCommentariesInput, UserUncheckedCreateWithoutCommentariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentariesInput
    connect?: UserWhereUniqueInput
  }

  export type CellphoneCreateNestedOneWithoutCommentariesInput = {
    create?: XOR<CellphoneCreateWithoutCommentariesInput, CellphoneUncheckedCreateWithoutCommentariesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutCommentariesInput
    connect?: CellphoneWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentariesNestedInput = {
    create?: XOR<UserCreateWithoutCommentariesInput, UserUncheckedCreateWithoutCommentariesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentariesInput
    upsert?: UserUpsertWithoutCommentariesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCommentariesInput, UserUncheckedUpdateWithoutCommentariesInput>
  }

  export type CellphoneUpdateOneRequiredWithoutCommentariesNestedInput = {
    create?: XOR<CellphoneCreateWithoutCommentariesInput, CellphoneUncheckedCreateWithoutCommentariesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutCommentariesInput
    upsert?: CellphoneUpsertWithoutCommentariesInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutCommentariesInput, CellphoneUncheckedUpdateWithoutCommentariesInput>
  }

  export type UserCreateNestedOneWithoutUserFavoritesInput = {
    create?: XOR<UserCreateWithoutUserFavoritesInput, UserUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFavoritesInput
    connect?: UserWhereUniqueInput
  }

  export type CellphoneCreateNestedOneWithoutUserFavoritesInput = {
    create?: XOR<CellphoneCreateWithoutUserFavoritesInput, CellphoneUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutUserFavoritesInput
    connect?: CellphoneWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserFavoritesNestedInput = {
    create?: XOR<UserCreateWithoutUserFavoritesInput, UserUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserFavoritesInput
    upsert?: UserUpsertWithoutUserFavoritesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutUserFavoritesInput, UserUncheckedUpdateWithoutUserFavoritesInput>
  }

  export type CellphoneUpdateOneRequiredWithoutUserFavoritesNestedInput = {
    create?: XOR<CellphoneCreateWithoutUserFavoritesInput, CellphoneUncheckedCreateWithoutUserFavoritesInput>
    connectOrCreate?: CellphoneCreateOrConnectWithoutUserFavoritesInput
    upsert?: CellphoneUpsertWithoutUserFavoritesInput
    connect?: CellphoneWhereUniqueInput
    update?: XOR<CellphoneUpdateWithoutUserFavoritesInput, CellphoneUncheckedUpdateWithoutUserFavoritesInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserRatingCreateWithoutUsersInput = {
    cellphones: CellphoneCreateNestedOneWithoutUserRatingInput
    rate: number
  }

  export type UserRatingUncheckedCreateWithoutUsersInput = {
    id?: number
    phoneId: number
    rate: number
  }

  export type UserRatingCreateOrConnectWithoutUsersInput = {
    where: UserRatingWhereUniqueInput
    create: XOR<UserRatingCreateWithoutUsersInput, UserRatingUncheckedCreateWithoutUsersInput>
  }

  export type UserRatingCreateManyUsersInputEnvelope = {
    data: Enumerable<UserRatingCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type CommentariesCreateWithoutUsersInput = {
    cellphones: CellphoneCreateNestedOneWithoutCommentariesInput
    commentary: string
  }

  export type CommentariesUncheckedCreateWithoutUsersInput = {
    id?: number
    phoneId: number
    commentary: string
  }

  export type CommentariesCreateOrConnectWithoutUsersInput = {
    where: CommentariesWhereUniqueInput
    create: XOR<CommentariesCreateWithoutUsersInput, CommentariesUncheckedCreateWithoutUsersInput>
  }

  export type CommentariesCreateManyUsersInputEnvelope = {
    data: Enumerable<CommentariesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type UserFavoritesCreateWithoutUsersInput = {
    cellphones: CellphoneCreateNestedOneWithoutUserFavoritesInput
  }

  export type UserFavoritesUncheckedCreateWithoutUsersInput = {
    id?: number
    phoneId: number
  }

  export type UserFavoritesCreateOrConnectWithoutUsersInput = {
    where: UserFavoritesWhereUniqueInput
    create: XOR<UserFavoritesCreateWithoutUsersInput, UserFavoritesUncheckedCreateWithoutUsersInput>
  }

  export type UserFavoritesCreateManyUsersInputEnvelope = {
    data: Enumerable<UserFavoritesCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type UserRatingUpsertWithWhereUniqueWithoutUsersInput = {
    where: UserRatingWhereUniqueInput
    update: XOR<UserRatingUpdateWithoutUsersInput, UserRatingUncheckedUpdateWithoutUsersInput>
    create: XOR<UserRatingCreateWithoutUsersInput, UserRatingUncheckedCreateWithoutUsersInput>
  }

  export type UserRatingUpdateWithWhereUniqueWithoutUsersInput = {
    where: UserRatingWhereUniqueInput
    data: XOR<UserRatingUpdateWithoutUsersInput, UserRatingUncheckedUpdateWithoutUsersInput>
  }

  export type UserRatingUpdateManyWithWhereWithoutUsersInput = {
    where: UserRatingScalarWhereInput
    data: XOR<UserRatingUpdateManyMutationInput, UserRatingUncheckedUpdateManyWithoutUserRatingInput>
  }

  export type UserRatingScalarWhereInput = {
    AND?: Enumerable<UserRatingScalarWhereInput>
    OR?: Enumerable<UserRatingScalarWhereInput>
    NOT?: Enumerable<UserRatingScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    phoneId?: IntFilter | number
    rate?: IntFilter | number
  }

  export type CommentariesUpsertWithWhereUniqueWithoutUsersInput = {
    where: CommentariesWhereUniqueInput
    update: XOR<CommentariesUpdateWithoutUsersInput, CommentariesUncheckedUpdateWithoutUsersInput>
    create: XOR<CommentariesCreateWithoutUsersInput, CommentariesUncheckedCreateWithoutUsersInput>
  }

  export type CommentariesUpdateWithWhereUniqueWithoutUsersInput = {
    where: CommentariesWhereUniqueInput
    data: XOR<CommentariesUpdateWithoutUsersInput, CommentariesUncheckedUpdateWithoutUsersInput>
  }

  export type CommentariesUpdateManyWithWhereWithoutUsersInput = {
    where: CommentariesScalarWhereInput
    data: XOR<CommentariesUpdateManyMutationInput, CommentariesUncheckedUpdateManyWithoutCommentariesInput>
  }

  export type CommentariesScalarWhereInput = {
    AND?: Enumerable<CommentariesScalarWhereInput>
    OR?: Enumerable<CommentariesScalarWhereInput>
    NOT?: Enumerable<CommentariesScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    phoneId?: IntFilter | number
    commentary?: StringFilter | string
  }

  export type UserFavoritesUpsertWithWhereUniqueWithoutUsersInput = {
    where: UserFavoritesWhereUniqueInput
    update: XOR<UserFavoritesUpdateWithoutUsersInput, UserFavoritesUncheckedUpdateWithoutUsersInput>
    create: XOR<UserFavoritesCreateWithoutUsersInput, UserFavoritesUncheckedCreateWithoutUsersInput>
  }

  export type UserFavoritesUpdateWithWhereUniqueWithoutUsersInput = {
    where: UserFavoritesWhereUniqueInput
    data: XOR<UserFavoritesUpdateWithoutUsersInput, UserFavoritesUncheckedUpdateWithoutUsersInput>
  }

  export type UserFavoritesUpdateManyWithWhereWithoutUsersInput = {
    where: UserFavoritesScalarWhereInput
    data: XOR<UserFavoritesUpdateManyMutationInput, UserFavoritesUncheckedUpdateManyWithoutUserFavoritesInput>
  }

  export type UserFavoritesScalarWhereInput = {
    AND?: Enumerable<UserFavoritesScalarWhereInput>
    OR?: Enumerable<UserFavoritesScalarWhereInput>
    NOT?: Enumerable<UserFavoritesScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    phoneId?: IntFilter | number
  }

  export type CameraFeaturesCreateWithoutCellphonesInput = {
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type CameraFeaturesUncheckedCreateWithoutCellphonesInput = {
    id?: number
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type CameraFeaturesCreateOrConnectWithoutCellphonesInput = {
    where: CameraFeaturesWhereUniqueInput
    create: XOR<CameraFeaturesCreateWithoutCellphonesInput, CameraFeaturesUncheckedCreateWithoutCellphonesInput>
  }

  export type CameraFeaturesCreateManyCellphonesInputEnvelope = {
    data: Enumerable<CameraFeaturesCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type VideoFeaturesCreateWithoutCellphonesInput = {
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type VideoFeaturesUncheckedCreateWithoutCellphonesInput = {
    id?: number
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type VideoFeaturesCreateOrConnectWithoutCellphonesInput = {
    where: VideoFeaturesWhereUniqueInput
    create: XOR<VideoFeaturesCreateWithoutCellphonesInput, VideoFeaturesUncheckedCreateWithoutCellphonesInput>
  }

  export type VideoFeaturesCreateManyCellphonesInputEnvelope = {
    data: Enumerable<VideoFeaturesCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type AccessoreisCreateWithoutCellphonesInput = {
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type AccessoreisUncheckedCreateWithoutCellphonesInput = {
    id?: number
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type AccessoreisCreateOrConnectWithoutCellphonesInput = {
    where: AccessoreisWhereUniqueInput
    create: XOR<AccessoreisCreateWithoutCellphonesInput, AccessoreisUncheckedCreateWithoutCellphonesInput>
  }

  export type AccessoreisCreateManyCellphonesInputEnvelope = {
    data: Enumerable<AccessoreisCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type UserRatingCreateWithoutCellphonesInput = {
    users: UserCreateNestedOneWithoutUserRatingInput
    rate: number
  }

  export type UserRatingUncheckedCreateWithoutCellphonesInput = {
    id?: number
    userId: number
    rate: number
  }

  export type UserRatingCreateOrConnectWithoutCellphonesInput = {
    where: UserRatingWhereUniqueInput
    create: XOR<UserRatingCreateWithoutCellphonesInput, UserRatingUncheckedCreateWithoutCellphonesInput>
  }

  export type UserRatingCreateManyCellphonesInputEnvelope = {
    data: Enumerable<UserRatingCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type CommentariesCreateWithoutCellphonesInput = {
    users: UserCreateNestedOneWithoutCommentariesInput
    commentary: string
  }

  export type CommentariesUncheckedCreateWithoutCellphonesInput = {
    id?: number
    userId: number
    commentary: string
  }

  export type CommentariesCreateOrConnectWithoutCellphonesInput = {
    where: CommentariesWhereUniqueInput
    create: XOR<CommentariesCreateWithoutCellphonesInput, CommentariesUncheckedCreateWithoutCellphonesInput>
  }

  export type CommentariesCreateManyCellphonesInputEnvelope = {
    data: Enumerable<CommentariesCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type UserFavoritesCreateWithoutCellphonesInput = {
    users: UserCreateNestedOneWithoutUserFavoritesInput
  }

  export type UserFavoritesUncheckedCreateWithoutCellphonesInput = {
    id?: number
    userId: number
  }

  export type UserFavoritesCreateOrConnectWithoutCellphonesInput = {
    where: UserFavoritesWhereUniqueInput
    create: XOR<UserFavoritesCreateWithoutCellphonesInput, UserFavoritesUncheckedCreateWithoutCellphonesInput>
  }

  export type UserFavoritesCreateManyCellphonesInputEnvelope = {
    data: Enumerable<UserFavoritesCreateManyCellphonesInput>
    skipDuplicates?: boolean
  }

  export type CameraFeaturesUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: CameraFeaturesWhereUniqueInput
    update: XOR<CameraFeaturesUpdateWithoutCellphonesInput, CameraFeaturesUncheckedUpdateWithoutCellphonesInput>
    create: XOR<CameraFeaturesCreateWithoutCellphonesInput, CameraFeaturesUncheckedCreateWithoutCellphonesInput>
  }

  export type CameraFeaturesUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: CameraFeaturesWhereUniqueInput
    data: XOR<CameraFeaturesUpdateWithoutCellphonesInput, CameraFeaturesUncheckedUpdateWithoutCellphonesInput>
  }

  export type CameraFeaturesUpdateManyWithWhereWithoutCellphonesInput = {
    where: CameraFeaturesScalarWhereInput
    data: XOR<CameraFeaturesUpdateManyMutationInput, CameraFeaturesUncheckedUpdateManyWithoutCameraFeaturesInput>
  }

  export type CameraFeaturesScalarWhereInput = {
    AND?: Enumerable<CameraFeaturesScalarWhereInput>
    OR?: Enumerable<CameraFeaturesScalarWhereInput>
    NOT?: Enumerable<CameraFeaturesScalarWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    megaPixels?: IntFilter | number
    apertureSize?: FloatFilter | number
    stabilization?: StringFilter | string
    macro?: BoolFilter | boolean
    panorama?: BoolFilter | boolean
    ultrawide?: BoolFilter | boolean
  }

  export type VideoFeaturesUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: VideoFeaturesWhereUniqueInput
    update: XOR<VideoFeaturesUpdateWithoutCellphonesInput, VideoFeaturesUncheckedUpdateWithoutCellphonesInput>
    create: XOR<VideoFeaturesCreateWithoutCellphonesInput, VideoFeaturesUncheckedCreateWithoutCellphonesInput>
  }

  export type VideoFeaturesUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: VideoFeaturesWhereUniqueInput
    data: XOR<VideoFeaturesUpdateWithoutCellphonesInput, VideoFeaturesUncheckedUpdateWithoutCellphonesInput>
  }

  export type VideoFeaturesUpdateManyWithWhereWithoutCellphonesInput = {
    where: VideoFeaturesScalarWhereInput
    data: XOR<VideoFeaturesUpdateManyMutationInput, VideoFeaturesUncheckedUpdateManyWithoutVideoFeaturesInput>
  }

  export type VideoFeaturesScalarWhereInput = {
    AND?: Enumerable<VideoFeaturesScalarWhereInput>
    OR?: Enumerable<VideoFeaturesScalarWhereInput>
    NOT?: Enumerable<VideoFeaturesScalarWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    maxRsolution?: StringFilter | string
    maxFPS?: IntFilter | number
    slowmotion?: BoolFilter | boolean
    stereoSoundRec?: BoolFilter | boolean
  }

  export type AccessoreisUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: AccessoreisWhereUniqueInput
    update: XOR<AccessoreisUpdateWithoutCellphonesInput, AccessoreisUncheckedUpdateWithoutCellphonesInput>
    create: XOR<AccessoreisCreateWithoutCellphonesInput, AccessoreisUncheckedCreateWithoutCellphonesInput>
  }

  export type AccessoreisUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: AccessoreisWhereUniqueInput
    data: XOR<AccessoreisUpdateWithoutCellphonesInput, AccessoreisUncheckedUpdateWithoutCellphonesInput>
  }

  export type AccessoreisUpdateManyWithWhereWithoutCellphonesInput = {
    where: AccessoreisScalarWhereInput
    data: XOR<AccessoreisUpdateManyMutationInput, AccessoreisUncheckedUpdateManyWithoutAccessoriesInput>
  }

  export type AccessoreisScalarWhereInput = {
    AND?: Enumerable<AccessoreisScalarWhereInput>
    OR?: Enumerable<AccessoreisScalarWhereInput>
    NOT?: Enumerable<AccessoreisScalarWhereInput>
    id?: IntFilter | number
    phoneId?: IntFilter | number
    earphone?: BoolFilter | boolean
    charger?: BoolFilter | boolean
    chargerPower?: IntNullableFilter | number | null
    pen?: BoolFilter | boolean
    phoneCase?: BoolFilter | boolean
    screenProtector?: BoolFilter | boolean
  }

  export type UserRatingUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: UserRatingWhereUniqueInput
    update: XOR<UserRatingUpdateWithoutCellphonesInput, UserRatingUncheckedUpdateWithoutCellphonesInput>
    create: XOR<UserRatingCreateWithoutCellphonesInput, UserRatingUncheckedCreateWithoutCellphonesInput>
  }

  export type UserRatingUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: UserRatingWhereUniqueInput
    data: XOR<UserRatingUpdateWithoutCellphonesInput, UserRatingUncheckedUpdateWithoutCellphonesInput>
  }

  export type UserRatingUpdateManyWithWhereWithoutCellphonesInput = {
    where: UserRatingScalarWhereInput
    data: XOR<UserRatingUpdateManyMutationInput, UserRatingUncheckedUpdateManyWithoutUserRatingInput>
  }

  export type CommentariesUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: CommentariesWhereUniqueInput
    update: XOR<CommentariesUpdateWithoutCellphonesInput, CommentariesUncheckedUpdateWithoutCellphonesInput>
    create: XOR<CommentariesCreateWithoutCellphonesInput, CommentariesUncheckedCreateWithoutCellphonesInput>
  }

  export type CommentariesUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: CommentariesWhereUniqueInput
    data: XOR<CommentariesUpdateWithoutCellphonesInput, CommentariesUncheckedUpdateWithoutCellphonesInput>
  }

  export type CommentariesUpdateManyWithWhereWithoutCellphonesInput = {
    where: CommentariesScalarWhereInput
    data: XOR<CommentariesUpdateManyMutationInput, CommentariesUncheckedUpdateManyWithoutCommentariesInput>
  }

  export type UserFavoritesUpsertWithWhereUniqueWithoutCellphonesInput = {
    where: UserFavoritesWhereUniqueInput
    update: XOR<UserFavoritesUpdateWithoutCellphonesInput, UserFavoritesUncheckedUpdateWithoutCellphonesInput>
    create: XOR<UserFavoritesCreateWithoutCellphonesInput, UserFavoritesUncheckedCreateWithoutCellphonesInput>
  }

  export type UserFavoritesUpdateWithWhereUniqueWithoutCellphonesInput = {
    where: UserFavoritesWhereUniqueInput
    data: XOR<UserFavoritesUpdateWithoutCellphonesInput, UserFavoritesUncheckedUpdateWithoutCellphonesInput>
  }

  export type UserFavoritesUpdateManyWithWhereWithoutCellphonesInput = {
    where: UserFavoritesScalarWhereInput
    data: XOR<UserFavoritesUpdateManyMutationInput, UserFavoritesUncheckedUpdateManyWithoutUserFavoritesInput>
  }

  export type CellphoneCreateWithoutCameraFeaturesInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutCameraFeaturesInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutCameraFeaturesInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutCameraFeaturesInput, CellphoneUncheckedCreateWithoutCameraFeaturesInput>
  }

  export type CellphoneUpsertWithoutCameraFeaturesInput = {
    update: XOR<CellphoneUpdateWithoutCameraFeaturesInput, CellphoneUncheckedUpdateWithoutCameraFeaturesInput>
    create: XOR<CellphoneCreateWithoutCameraFeaturesInput, CellphoneUncheckedCreateWithoutCameraFeaturesInput>
  }

  export type CellphoneUpdateWithoutCameraFeaturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutCameraFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneCreateWithoutVideoFeaturesInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutVideoFeaturesInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutVideoFeaturesInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutVideoFeaturesInput, CellphoneUncheckedCreateWithoutVideoFeaturesInput>
  }

  export type CellphoneUpsertWithoutVideoFeaturesInput = {
    update: XOR<CellphoneUpdateWithoutVideoFeaturesInput, CellphoneUncheckedUpdateWithoutVideoFeaturesInput>
    create: XOR<CellphoneCreateWithoutVideoFeaturesInput, CellphoneUncheckedCreateWithoutVideoFeaturesInput>
  }

  export type CellphoneUpdateWithoutVideoFeaturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutVideoFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneCreateWithoutAccessoriesInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutAccessoriesInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutAccessoriesInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutAccessoriesInput, CellphoneUncheckedCreateWithoutAccessoriesInput>
  }

  export type CellphoneUpsertWithoutAccessoriesInput = {
    update: XOR<CellphoneUpdateWithoutAccessoriesInput, CellphoneUncheckedUpdateWithoutAccessoriesInput>
    create: XOR<CellphoneCreateWithoutAccessoriesInput, CellphoneUncheckedCreateWithoutAccessoriesInput>
  }

  export type CellphoneUpdateWithoutAccessoriesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutAccessoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type UserCreateWithoutUserRatingInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    commentaries?: CommentariesCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserRatingInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUserRatingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserRatingInput, UserUncheckedCreateWithoutUserRatingInput>
  }

  export type CellphoneCreateWithoutUserRatingInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutUserRatingInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutUserRatingInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutUserRatingInput, CellphoneUncheckedCreateWithoutUserRatingInput>
  }

  export type UserUpsertWithoutUserRatingInput = {
    update: XOR<UserUpdateWithoutUserRatingInput, UserUncheckedUpdateWithoutUserRatingInput>
    create: XOR<UserCreateWithoutUserRatingInput, UserUncheckedCreateWithoutUserRatingInput>
  }

  export type UserUpdateWithoutUserRatingInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    commentaries?: CommentariesUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    commentaries?: CommentariesUncheckedUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CellphoneUpsertWithoutUserRatingInput = {
    update: XOR<CellphoneUpdateWithoutUserRatingInput, CellphoneUncheckedUpdateWithoutUserRatingInput>
    create: XOR<CellphoneCreateWithoutUserRatingInput, CellphoneUncheckedCreateWithoutUserRatingInput>
  }

  export type CellphoneUpdateWithoutUserRatingInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutUserRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type UserCreateWithoutCommentariesInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutCommentariesInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingUncheckedCreateNestedManyWithoutUsersInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutCommentariesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentariesInput, UserUncheckedCreateWithoutCommentariesInput>
  }

  export type CellphoneCreateWithoutCommentariesInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutCommentariesInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    userFavorites?: UserFavoritesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutCommentariesInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutCommentariesInput, CellphoneUncheckedCreateWithoutCommentariesInput>
  }

  export type UserUpsertWithoutCommentariesInput = {
    update: XOR<UserUpdateWithoutCommentariesInput, UserUncheckedUpdateWithoutCommentariesInput>
    create: XOR<UserCreateWithoutCommentariesInput, UserUncheckedCreateWithoutCommentariesInput>
  }

  export type UserUpdateWithoutCommentariesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUncheckedUpdateManyWithoutUsersNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CellphoneUpsertWithoutCommentariesInput = {
    update: XOR<CellphoneUpdateWithoutCommentariesInput, CellphoneUncheckedUpdateWithoutCommentariesInput>
    create: XOR<CellphoneCreateWithoutCommentariesInput, CellphoneUncheckedCreateWithoutCommentariesInput>
  }

  export type CellphoneUpdateWithoutCommentariesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutCommentariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    userFavorites?: UserFavoritesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type UserCreateWithoutUserFavoritesInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingCreateNestedManyWithoutUsersInput
    commentaries?: CommentariesCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutUserFavoritesInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    password: string
    userRating?: UserRatingUncheckedCreateNestedManyWithoutUsersInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutUserFavoritesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserFavoritesInput, UserUncheckedCreateWithoutUserFavoritesInput>
  }

  export type CellphoneCreateWithoutUserFavoritesInput = {
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneUncheckedCreateWithoutUserFavoritesInput = {
    id?: number
    name: string
    price?: number | null
    processor: string
    RAM: number
    storage: number
    mAh: number
    have5G: boolean
    displayType: string
    displaySize: number
    displayResolution: string
    displayFPS: number
    OS: string
    brand: string
    cameraFeatures?: CameraFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    videoFeatures?: VideoFeaturesUncheckedCreateNestedManyWithoutCellphonesInput
    accessories?: AccessoreisUncheckedCreateNestedManyWithoutCellphonesInput
    userRating?: UserRatingUncheckedCreateNestedManyWithoutCellphonesInput
    commentaries?: CommentariesUncheckedCreateNestedManyWithoutCellphonesInput
  }

  export type CellphoneCreateOrConnectWithoutUserFavoritesInput = {
    where: CellphoneWhereUniqueInput
    create: XOR<CellphoneCreateWithoutUserFavoritesInput, CellphoneUncheckedCreateWithoutUserFavoritesInput>
  }

  export type UserUpsertWithoutUserFavoritesInput = {
    update: XOR<UserUpdateWithoutUserFavoritesInput, UserUncheckedUpdateWithoutUserFavoritesInput>
    create: XOR<UserCreateWithoutUserFavoritesInput, UserUncheckedCreateWithoutUserFavoritesInput>
  }

  export type UserUpdateWithoutUserFavoritesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUpdateManyWithoutUsersNestedInput
    commentaries?: CommentariesUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutUserFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userRating?: UserRatingUncheckedUpdateManyWithoutUsersNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type CellphoneUpsertWithoutUserFavoritesInput = {
    update: XOR<CellphoneUpdateWithoutUserFavoritesInput, CellphoneUncheckedUpdateWithoutUserFavoritesInput>
    create: XOR<CellphoneCreateWithoutUserFavoritesInput, CellphoneUncheckedCreateWithoutUserFavoritesInput>
  }

  export type CellphoneUpdateWithoutUserFavoritesInput = {
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUpdateManyWithoutCellphonesNestedInput
  }

  export type CellphoneUncheckedUpdateWithoutUserFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    price?: NullableFloatFieldUpdateOperationsInput | number | null
    processor?: StringFieldUpdateOperationsInput | string
    RAM?: IntFieldUpdateOperationsInput | number
    storage?: IntFieldUpdateOperationsInput | number
    mAh?: IntFieldUpdateOperationsInput | number
    have5G?: BoolFieldUpdateOperationsInput | boolean
    displayType?: StringFieldUpdateOperationsInput | string
    displaySize?: FloatFieldUpdateOperationsInput | number
    displayResolution?: StringFieldUpdateOperationsInput | string
    displayFPS?: IntFieldUpdateOperationsInput | number
    OS?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    cameraFeatures?: CameraFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    videoFeatures?: VideoFeaturesUncheckedUpdateManyWithoutCellphonesNestedInput
    accessories?: AccessoreisUncheckedUpdateManyWithoutCellphonesNestedInput
    userRating?: UserRatingUncheckedUpdateManyWithoutCellphonesNestedInput
    commentaries?: CommentariesUncheckedUpdateManyWithoutCellphonesNestedInput
  }

  export type UserRatingCreateManyUsersInput = {
    id?: number
    phoneId: number
    rate: number
  }

  export type CommentariesCreateManyUsersInput = {
    id?: number
    phoneId: number
    commentary: string
  }

  export type UserFavoritesCreateManyUsersInput = {
    id?: number
    phoneId: number
  }

  export type UserRatingUpdateWithoutUsersInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutUserRatingNestedInput
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingUncheckedUpdateManyWithoutUserRatingInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type CommentariesUpdateWithoutUsersInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutCommentariesNestedInput
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesUncheckedUpdateManyWithoutCommentariesInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type UserFavoritesUpdateWithoutUsersInput = {
    cellphones?: CellphoneUpdateOneRequiredWithoutUserFavoritesNestedInput
  }

  export type UserFavoritesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
  }

  export type UserFavoritesUncheckedUpdateManyWithoutUserFavoritesInput = {
    id?: IntFieldUpdateOperationsInput | number
    phoneId?: IntFieldUpdateOperationsInput | number
  }

  export type CameraFeaturesCreateManyCellphonesInput = {
    id?: number
    megaPixels: number
    apertureSize: number
    stabilization: string
    macro: boolean
    panorama: boolean
    ultrawide: boolean
  }

  export type VideoFeaturesCreateManyCellphonesInput = {
    id?: number
    maxRsolution: string
    maxFPS: number
    slowmotion: boolean
    stereoSoundRec: boolean
  }

  export type AccessoreisCreateManyCellphonesInput = {
    id?: number
    earphone: boolean
    charger: boolean
    chargerPower?: number | null
    pen: boolean
    phoneCase: boolean
    screenProtector: boolean
  }

  export type UserRatingCreateManyCellphonesInput = {
    id?: number
    userId: number
    rate: number
  }

  export type CommentariesCreateManyCellphonesInput = {
    id?: number
    userId: number
    commentary: string
  }

  export type UserFavoritesCreateManyCellphonesInput = {
    id?: number
    userId: number
  }

  export type CameraFeaturesUpdateWithoutCellphonesInput = {
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CameraFeaturesUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CameraFeaturesUncheckedUpdateManyWithoutCameraFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    megaPixels?: IntFieldUpdateOperationsInput | number
    apertureSize?: FloatFieldUpdateOperationsInput | number
    stabilization?: StringFieldUpdateOperationsInput | string
    macro?: BoolFieldUpdateOperationsInput | boolean
    panorama?: BoolFieldUpdateOperationsInput | boolean
    ultrawide?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesUpdateWithoutCellphonesInput = {
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type VideoFeaturesUncheckedUpdateManyWithoutVideoFeaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    maxRsolution?: StringFieldUpdateOperationsInput | string
    maxFPS?: IntFieldUpdateOperationsInput | number
    slowmotion?: BoolFieldUpdateOperationsInput | boolean
    stereoSoundRec?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisUpdateWithoutCellphonesInput = {
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AccessoreisUncheckedUpdateManyWithoutAccessoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    earphone?: BoolFieldUpdateOperationsInput | boolean
    charger?: BoolFieldUpdateOperationsInput | boolean
    chargerPower?: NullableIntFieldUpdateOperationsInput | number | null
    pen?: BoolFieldUpdateOperationsInput | boolean
    phoneCase?: BoolFieldUpdateOperationsInput | boolean
    screenProtector?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserRatingUpdateWithoutCellphonesInput = {
    users?: UserUpdateOneRequiredWithoutUserRatingNestedInput
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type UserRatingUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    rate?: IntFieldUpdateOperationsInput | number
  }

  export type CommentariesUpdateWithoutCellphonesInput = {
    users?: UserUpdateOneRequiredWithoutCommentariesNestedInput
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type CommentariesUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    commentary?: StringFieldUpdateOperationsInput | string
  }

  export type UserFavoritesUpdateWithoutCellphonesInput = {
    users?: UserUpdateOneRequiredWithoutUserFavoritesNestedInput
  }

  export type UserFavoritesUncheckedUpdateWithoutCellphonesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}